---
toc: yes
title: ゲーム向けJSライブラリ雑感
...

[http://vnctst.tir.jp/karasumaclj/](http://vnctst.tir.jp/karasumaclj/) より


# ゲーム向けJSライブラリ雑感

最近試した、ゲーム向けJSライブラリの雑感です。

ここに書いている以外のライブラリもある程度試したりしたのですが、そこまで使い込んでいる訳ではないので、ここでは省略しています。

まだ見ぬ、より良いライブラリがあるかもしれません。


## 前書き

大きく分けて、以下の分類になります。

1. 「全部入り」の、いわゆる「ゲームエンジン」
2. グラフィック描画ライブラリ
3. 音源再生ライブラリ


## ゲームエンジン/グラフィック描画ライブラリ

ゲームエンジンおよびグラフィック描画ライブラリの評価対象ポイントは以下あたりです。

- ゲームを作成する際に、必須の機能および、あると便利な機能が含まれているか。
    - 個人的には、以下の機能あたりを評価
        - テクスチャの描画(拡大縮小、回転、色付け、透過、その他のエフェクト対応、等々を含む)
        - ゲームオブジェクトをグループ/レイヤでまとめる機能(できればツリー構造が望ましい)
        - パーティクルエンジン
        - 各ゲームシーンの個別管理
        - 複数行テキストの描画(webフォント対応や領域測定含む)
- APIは十分に練られているか。無駄な複雑性を持たず、簡潔なコードで記述が可能か。
- コード品質は良いか。バグや分かりにくい挙動がなく、できればブラウザ互換性も保たれているか。


### Phaser

[http://phaser.io/](http://phaser.io/)

- 機能が一通り揃ったゲームエンジン。
    - ある程度さわってみたゲームエンジン類の中では機能の充実、コードのメンテ状況、ドキュメント/サンプルの充実、等々が一番良かった為、本格的に利用してみる事に。
    - [AstroCats](http://www.nicovideo.jp/watch/sm24628600)でも利用している。
- 後述のpixi.jsを組み込んでいるが、性能およびAPIの使いやすさの面が、pixi.jsほどには良くはない部分があるように感じられた。
    - 特に問題なのが、ゲームシーン内にゲームオブジェクトを追加する際に多大なcpuコストがかかる事。pixi.jsでもそれなりにかかるが、Phaserでは何故かそれどころでないレベルになっている。下手に組むと、古いPCだとブラウザがフリーズした状態になってしまい、非常に印象が悪くなる。
- キーボード入力等のハンドル類の設定箇所があまりよくなく、ゲームシーンの切り替え時に残ってしまうものがあるので、それらはゲームシーンのfinalizerで自前で除去したりする必要がある。
    - 全体的に、あまりゲームシーンの切り替えを意識した作りにはなってないように感じられた。サンプルにも、ゲームシーンの切り替えを扱ったものが全然ない


### Crafty

[http://craftyjs.com/](http://craftyjs.com/)

- 某Unity風のコンポーネントシステムおよびメッセージシステムを採用したゲームエンジン。
    - コンポーネントシステムと動的型のjs(およびcljs)との相性は良く、非常に簡潔かつ分かりやすいコードで記述ができる。
        - クラスの継承でゲームオブジェクトの属性を設定するような他のゲームエンジンとは一線を画する。
    - コンポーネントシステムはもちろん自分で独自のものを新しく定義できる
- ゲームオブジェクトに対して`bind`系メソッドでリスナを設定し、別のところからメッセージ(イベント)を送信(trigger)する事で、オブジェクト間での情報伝達や制御を楽に扱える。もちろんメッセージはツリー構造になったゲームオブジェクトの子要素にも伝達させられる。
- Crafty独自の特徴として「domとcanvasを同等に扱える」という点がある。
    - 「普段はcanvasで描画し、特定の入力フォームや外部リンクだけdomで描画する」ような事が簡単に実現できる。
    - ただし、この「domとcanvasを同等に扱える」事を実現させる為に、標準付属コンポーネントには、canvas固有の高度な描画機能への対応はほとんど入っていない。
        - 必要なら自前でコンポーネントを作成する必要がある…。
    - 重大な問題点として、android系ブラウザでは「domが重なった場合のタッチ判定がz-index通りにならない」というバグがある為、このdom機能を使う場合はandroidへの対応を諦めなくてはならない。
        - もしくは逆に「androidへの対応を行う為に、このdom機能を諦める」か。この場合、貧弱なcanvas描画機能だけが残る結果となってしまい非常に不憫(Crafty自体は何も悪くないので余計に)。
- 標準付属コンポーネントの品質があまりよくない。微妙な挙動をしたり、コンポーネント同士が干渉したりする事がある。
    - もちろん、標準付属コンポーネントが気に入らなければ、自前でコンポーネントを作ればよいのだが、それはつまり、結局自分でクロスブラウザ対応をしないといけないという事でもある

根本のシステムは非常に優れているし、canvasとdomの種類の違うゲームオブジェクトを共存させられる点も非常に良い。

しかし自分としてはandroid対応もしたいので、dom機能は諦めざるをえない。そしてコンポーネントを自作していくのは、クロスブラウザ対応の面が大変。

その結果、「これなら、他のグラフィック描画ライブラリに、自前でコンポーネントシステム類を追加した方がいいのでは？」という結論となり、Craftyは使わない事となった。


### pixi.js

[http://www.pixijs.com/](http://www.pixijs.com/)

- 前述のPhaserを始めとする、多くのゲームエンジンで採用されている実績のある、ゲーム向けグラフィック描画ライブラリ。
- 本当にグラフィック回りに特化しているので、自前で `requestAnimationFrame` を回す部分を用意したりする必要がある。これはデメリットではなく自由度の高さとして評価する事もできるが、とにかくそういう事になっている。
- 描画速度性能の良さを売りにしているが、それだけではなく、API設計もかなり良い設計になっているように感じられた。
- 一部の機能は特定ブラウザで問題がある。具体的には色付け(tint)とブレンディングモード指定あたり。MacのSafariやモバイルのWebKit系ブラウザで問題が出やすい。しかしFireFox, Chrome, IEでは別に問題はないように見える。
    - あんまり再現確認とかはしてないので、必要なら各自で確認を…

APIが扱いやすいので、自分はpixiをそのまま使う事にした。


### 全体的な評価

- ゲームエンジン系は一つ選べば機能が一通り入っているので、時間の限られたHackathon系イベントに向いていると感じられた。
    - ただ幅広い機能をカバーしている分、専用のライブラリと比べて品質面で劣る事が多いようにも感じられた。


## 音源再生ライブラリ

音源再生ライブラリの評価対象ポイントは以下あたりです。

- 一つの音源ファイルで、全ブラウザにて再生可能か
    - これは条件として挙げているものの、根本的に無理っぽい。現状ではoggとmp3の両方を用意しないと駄目なようだ。
    - 代わりに「oggとmp3のどちらか適切な方を自動的に選択して再生できるか」とする。
- 音源ファイルのプリロードが可能か
- BGM用とSE用のチャンネルが分離しているか
- 同じSEを連打してもちゃんと別々に(重なって)再生されるか
- SEのチャンネル数の上限に達した場合の挙動の行儀の良さ
    - 最も残り再生時間が短いSEチャンネルを強制的に終了させて、そこで再生させるのがベスト
    - 何も再生しないのはあまりよくない
    - もちろん、BGMチャンネルに手を付けたりしない事
- SEの再生開始は遅延なく、素早く実行されるか
- SEの音量を個別に設定可能か
- メモリリークしないか
- BGMの音量、pan、pitch、等々の設定は可能か
    - panやpitch設定はWebAudioでのみ可能で、htmlのaudioタグでは非対応
- BGMはループ指定可能か。またBGM終了時に実行したいハンドルを設定可能か。
- BGMのフェードイン/フェードアウトが可能か。またフェードイン/フェードアウト完了時に実行したいハンドルを設定可能か。また途中でのキャンセルは可能か。
- モバイル環境でもBGM/SE再生可能か
    - これも条件として挙げているものの、根本的に非常に厳しい。
        - android系ブラウザでまともに再生されるのはFireFoxのみ。標準ブラウザ(およびWebKit系ブラウザ)とChromeでは、再生チャンネルが全体で一個しかないようで、SEを鳴らすとBGMが止まってしまう。
        - iOS系はタッチ系イベントハンドラ内でしか再生ができないようだ。
- APIは十分に練られているか。無駄な複雑性を持たず、簡潔なコードで記述が可能か。
- コード品質は良いか。バグや分かりにくい挙動がなく、できればブラウザ互換性も保たれているか。


### Phaser.Sound

[http://docs.phaser.io/Phaser.Sound.html](http://docs.phaser.io/Phaser.Sound.html)

- ゲームエンジンであるPhaser付属の音源再生機能。
- 正直なところ、後述の専用ライブラリ各種を選ぶよりもずっと良い。
    - 必要な機能が揃っており、不具合もなく動く。


### Crafty.audio

[http://craftyjs.com/api/Crafty-audio.html](http://craftyjs.com/api/Crafty-audio.html)

- ゲームエンジンであるCrafty付属の音源再生機能。
- HTML5 audioのみ対応で、あまり品質が良くない。
    - フェード系機能はない。
    - たまに再生や停止に失敗する事がある(気がする)。


### SoundJS

[http://www.createjs.com/#!/SoundJS](http://www.createjs.com/#!/SoundJS)

- トラブルが多い。これは避けた方がよい。
- 扱いづらいAPI、少ない機能(フェード等はない)、低い品質を持つ。
- WebAudioPlugin, HTMLAudioPlugin, FlashPluginの三つを、優先順位指定付きで利用可能なものを選んで使うように設定できる。が、WebAudioPlugin以外はまともにメンテされてないように見える
    - HTMLAudioPluginを優先して使うように設定してみたところ、エラーが出て再生できなかった(WebAudioPluginでは再生できていたのに)。FlashPluginは音はちゃんと再生されたものの、音量変更は動かず、また再生開始までに1秒程度の遅延が発生する(つまりゲームのSE用等には使えない)。


### Howler

[https://github.com/goldfire/howler.js/](https://github.com/goldfire/howler.js/)

- SoundJSほどではないが、これもHTML Audioのコードの品質があまりよくない。
- サウンドスプライト機能に対応しているが、これがsetTimeoutによる実装になっている為、setTimeoutの精度が悪くなると、BGMのループやSEの末尾が切れたり伸びたりしてしまう。
- フェード機能はあるものの、フェードのキャンセルができない。多重にフェードを実行するとおかしな事になる。
- 現時点ではv1.1.25が最新版だが、2.0ブランチがあり、そちらでは上記の問題点が改善されているかもしれない(されてないかもしれない)。


### Buzz

[http://buzz.jaysalvat.com/](http://buzz.jaysalvat.com/)

- きちんと動作するし、フェード等も備えている。
- しかしゲームのSEのような、同じSEを重なって鳴るように連打するような用途は完全に想定外のようで、連打ができない。
    - 鳴らす毎にインスタンスを生成して使い捨てるようにしてみたところ、同じSEを連打する事自体はできたものの、この方法だとメモリリークしてしまうようだ(FireFoxで確認)。
        - インスタンスを明示的に破棄するmethodは提供されていないし、生成したインスタンス自体の音源を差し換える機能も特に提供されてはいない。
        - 自分で明示的に特定プロパティ値をdeleteしたりすれば、メモリリークを避けられるかも知れないが、未確認


### 全体的な評価

- 一番まともなのが Phaser.Sound である、という結論に。
- そもそもモバイルでの再生が絶望的なので、音回りは今はまだ諦めた方がいいのかもしれない




<!-- vim:set ft=pandoc ts=4 sts=4 sw=4 et: -->
