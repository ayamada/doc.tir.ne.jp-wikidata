---
toc: yes
categories: todo
title: TODO
...

このページには、doc.tir.ne.jpをメンテする上で必要な各種の残り作業を列挙します。

作業が完了したりTODOを諦めたりしたら、後で確認する意味があるものは「終了したTODO」に移動させ、そうでないものはそのまま消していきます。


# 優先TODO

## 「..」モジュールを作る
- サブディレクトリなwikinameのところに「..」相当のリンクをつけたい
    - gititのモジュール書いてやってみる
    - しかしどうも、gititでは「/dir」と「/dir/」の扱いが違い、「/dir/child」があるからといって「/dir」があるとは限らないので(「/dir/」はあるが)、安易に「..」相当のリンクを貼れないっぽいようだ。モジュール作らずに手で貼った方がいい？
        - しかし、doc.tir.ne.jpに限れば、「/dir/child」を書く時は「/dir」も書くルールで運用する、という事なら、モジュール作ってしまった方がいいと思う
            - 「/dir」があるなら「/dir」に、ないなら「/dir/」にリンクする、という挙動がベスト
- 現状だと移動が不便なので優先して作る事
- plugins/Subst.hs あたりを参考にする
- 名前は？
    - とりあえず「parentLink」で


## 必要な成果物ページを作成
- 「いわゆる人工知能(仮)」を完成させる為に必要な各モジュールの一覧、および、それのプロトタイプ成果物とかを木構造で示したり具体的にどんなの作るのかの概要とか書いたりするページを作る事。
    - とりあえず、androidアプリとしてワールドシミュレータをまず作る予定なので、その成果物ページと、開発環境構築手順ページは必要。


## 仕訳帳インターフェースを作成する
- 仕訳帳を書く必要がある！！！
    - 経費の算出および将来に作業時のコスト見積りの為に
- コストを金額および時間として記入する
    - これらの情報はページのメタ情報欄に入れておき(cost: および benefit: )、あとで合計したりできるようにする
    - 単位は円でいいのか？
        - 可能なら金額の単位は通貨以外の何かにしたいが、現在のところ候補なし
        - 今のところ、なんとなく「円なら単位なし」「ドルや時間の場合は単位付き」というルールになっている。本当にこのルールで続けて良いかどうかは考える必要あり
            - なんでこうなったかというと、要は「円」だけマルチバイト文字なので抵抗があるから(「\\」はフォントによってバックスラッシュになるので微妙)
                - 「10000 yen」とかでいいのでは。どうせ時間は「2 hours」とかだし。ドルも「100 dollars」でいいと思う
                    - ドルが複数形だと円も「1000 yens」になる気もするが…
                        - どうやら「yenは、複数形もyen」という理屈らしい
    - 利益として得た分の記入方法も考える事
- 手軽に記入できる必要がある
    - コマンドラインから、および、メール経由、がベスト
- gititの1ページになるようにする
    - wikinameの形式は「[/journal/2012/08/28/14:29]()」みたいにする(仮)
    - これに伴い、「カテゴリ一覧ページを逆順にするプラグイン」を作る事も考える
- plugins/PigLatin.hs を参考に、costを合計するプラグインも作る事


# メタTODO

- [Categories: postponed](/_category/postponed)なページを完成させましょう。


# 全般的なTODO

## カテゴリ命名基準の決定
- 現在のところ、カテゴリはなんとなく「英小文字のみ」のルールにしているが、これ別に日本語とかでもいいと思うので、ちょっとルールを考え直す事
    - 今あるカテゴリは「gitit」「journal」「postponed」「todo」


## 残りページ作成
- 「doc.tir.ne.jpのドキュメントのライセンス」のページ
- 「doc.tir.ne.jpのドキュメント作成ルール」のページ
    - 要は、カテゴリどうするかとか(特にpostponedの扱いとか)、wikinameはこういう命名基準にするとか、そういう話を書くページ


## githubにテンプレート類を保存する
- 先にdocとintraのテンプレート類の統合を行いたいが、時間がかかるので、現段階ではintraのみ保存する
- 具体的に保存する対象は、plugins, static, templates、それから /etc/init.d/gitit-daemon あたり。


## githubにパッチ類を保存する
- 技情研ネットで手を入れたgititのソースは、ブランチを変更してあとで保存する事
    - バージョンが上がったらgit rebaseで対応する
    - 問題は、github上のgititはバージョンが少し古い事
        - ワークツリー上で直にmakeせず、ブランチが分かれている事を利用してブランチ間の差分だけ取り出し、それをhackageにある最新のgititに適用してビルドする、という手順とする方向で
            - 煩雑なので面倒だが仕方がない


## 各cgiを作成
- deploy.cgi(intraからdocへ内容反映、プレビュー(diff形式？)あり)
- push.cgi(githubかどこかの外部リポジトリにpush、シェルからも実行可能)
    - この時のpush元は、内部編集用ではなく、公開側からとする事


# gitit本体をいじる必要のあるTODO

このTODOの内、一般的な情報のものについては、完了後は[#完了したtodo]()ではなく、[/gitit]()に移動させましょう。

## 差分表示の時に一行の長さが長すぎてはみでるのをどうにかする

- preだから。あとでcodeとbrにするパッチを作る。実際には以下のタグになっている

        <pre class="diff"><span> ... </span></pre>


## Recent changes とかの日時をUTCじゃなくJSTにしたい
- やりかた不明…通常だとLOCALEとかいじると思うのだけど
    - Network/Gitit/Handlers.hs の showActivity のところを見ると、直に `show $ revDateTime rev` でリポジトリから読んでいる。
    - Recent changes以外にもUTCで出している箇所はそこそこあるので、パッチとして修正する場合は全部まとめて対応する必要あり
        - なので、可能ならLOCALEとかLC_TIMEとかで対応できればいいんだけど
- Signature.hs と Date.hs の方もJSTにする必要があるが、こっちは `formatDateTime "%c" datetime` で行っているので、ここを Data.DateTime のドキュメント見ながら書き換えればok


## 自分で新たに「\$hoge\$」タグを追加する
- これはpandocのtemplate機能らしい→ http://johnmacfarlane.net/pandoc/README.html#templates
- 調べた結果、この機能はないようだ。しかしこの機能は今回の用途では必須なので、自分で拡張して追加する事を考える
    - プラグインの一種として追加(現状あるTypes.hs内の data Plugin = PageTransform | PreParseTransform | PreCommitTransform に追加するイメージ)
- この機能は以下を実現するのに使う
    - docとintraのテンプレートの共通化(\$hoge\$を見て切り換える等をできるようにする)
    - LastModified.hsの位置をfootnoteの下になるように移動(\$lastmodified\$とか作る)

## ExportのSlidyを動くようにする。それができないなら「\$exportbox\$」から抜く方法を考える

## \*.st内における、httpからはじまるfull urlの出し方を調べ、pagetool.stのbingのところに反映
- 調べた結果、取れるインターフェースはないようだ…
    - デフォルトではhostnameシステムコールで取るらしい
    - どうしても取りたいなら自分でプラグイン作ってHost: ヘッダから取るしかなさそう

## がんばってcssを独自作成する
- 技情研ネットの各サイト共通のもの？
    - とりあえずInitializrベースでtir.jpとか作り直す。その時に一緒にcss考え直す
    - サイトの見た目は「[協力者/支持者を集める](policy#協力者支持者を集める)」事に微妙に影響する為、それなりに真面目に行う事。
    - 以下のサイトみたいなのがいいと思う。
        - [ニャンパス株式会社の技術ページ](http://nyampass.com/technic/index.html)。動いたりしなくていいので、こういうデザインにしたい。
        - [Galois社のサイト](http://corp.galois.com/)。海外で一般的な会社のデザインみたいにしたい。あとここの会社は方針とか参考にできる部分が多い。あとで取り入れられそうなものは取り入れる事。


## LastModified.hs を、印刷用バージョンでは非表示になるようにする
- 適当にクラス指定すればいい
    - ただしCategoryは「id="categoryList"」で判定しており、他の非表示になっている部分のクラスから取る必要がある
    - static/css/print.css を見て、適当に不可視になりそうなクラスを選ぶ


# 終了したTODO

- 今は、「技情研ネット関連のコンテンツ」は[/tir.ne.jp/]()配下に設置する、というルールでやっているが、これはカテゴリの方がいいかどうか考える
    - とりあえずこれに限っては、カテゴリでない方がいい、という事になった(一覧を見た時に畳み込まれて、ちらかる事がない、という理由により)

- 日本語のmarkdown記法の解説ページ(可能ならpandoc版のもの)へのリンクを、編集画面内の左サイドバーに追加する
    - 英語版のリンクはもう入っている
    - 探したがpandoc版はなかった。
    - リンクつけるとしたら、 [wikipediaのmarkdown項目](http://ja.wikipedia.org/wiki/Markdown)、[全訳](http://blog.2310.net/archives/6)、[チートシート](http://qiita.com/items/c686397e4a0f4f11683d)ぐらいだが、どれも微妙な感じ
        - これを必要とするのは新しくメンバーになる人ぐらいなので、そのタイミングで入れるかどうか検討する事にする

- 各見出しのリンク先は#TOCだが、それよりは自分自身を指した方が便利なので変更する
    - もしくは、見出しの末尾に自分自身を指す、リンク取得用のhrefを入れておくか
    - この処理はpandocが行っているようで、gititだけでは直せないっぽいので諦める事に



<!-- vim:set ft=markdown ts=4 sts=4 sw=4 et: -->
