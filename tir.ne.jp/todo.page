---
toc: yes
categories: todo
title: TODO
...

このページには、doc.tir.ne.jpをメンテする上で必要な各種の残り作業を列挙します。

作業が完了したりTODOを諦めたりしたら、後で確認する意味があるものは「終了したTODO」に移動させ、そうでないものはそのまま消していきます。


# 優先TODO

## 必要な成果物ページを作成
- 「いわゆる人工知能(仮)」を完成させる為に必要な各モジュールの一覧、および、それのプロトタイプ成果物とかを木構造で示したり具体的にどんなの作るのかの概要とか書いたりするページを作る事。
    - とりあえず、androidアプリとしてワールドシミュレータをまず作る予定なので、その成果物ページと、開発環境構築手順ページは必要。


## 仕訳帳インターフェースを作成する
- 仕訳帳を書く必要がある！！！
    - 経費の算出および将来に作業時のコスト見積りの為に
- コストを金額および時間として記入する
    - これらの情報はページのメタ情報欄に入れておき(cost: および benefit: )、あとで合計したりできるようにする
    - 単位は円でいいのか？
        - 可能なら金額の単位は通貨以外の何かにしたいが、現在のところ候補なし
        - 今のところ、なんとなく「円なら単位なし」「ドルや時間の場合は単位付き」というルールになっている。本当にこのルールで続けて良いかどうかは考える必要あり
            - なんでこうなったかというと、要は「円」だけマルチバイト文字なので抵抗があるから(「\\」はフォントによってバックスラッシュになるので微妙)
                - 「10000 yen」とかでいいのでは。どうせ時間は「2 hours」とかだし。ドルも「100 dollars」でいいと思う
                    - ドルが複数形だと円も「1000 yens」になる気もするが…
                        - どうやら「yenは、複数形もyen」という理屈らしい
    - 利益として得た分の記入方法も考える事
- 手軽に記入できる必要がある
    - コマンドラインから、および、メール経由、がベスト
- gititの1ページになるようにする
    - wikinameの形式は「[/journal/2012/08/28/14:29]()」みたいにする(仮)
    - これに伴い、「カテゴリ一覧ページを逆順にするプラグイン」を作る事も考える
- plugins/PigLatin.hs を参考に、costを合計するプラグインも作る事


# メタTODO

- [Categories: postponed](/_category/postponed)なページを完成させましょう。


# 全般的なTODO

## 残りページ作成

### 「rssについて」ページ
- 現状のrssがあまり役に立たない為、何らかの解説文が必要に思える
    - 単体のページにせずに、どこかのページにちょろっと書くだけでもいいと思う
- 以下の内容を書く
    - 現状では「フィード購読(全)」は特定タイミングにまとめて大量に流れるので購読はおすすめしない、興味のあるページだけ単独で「フィード購読(単)」するのをすすめる
    - その他一般的なatomフィードについての解説など

### 「doc.tir.ne.jpのドキュメントのライセンス」ページ
- あと「無保証です」「EULAっぽいもの」とかのページも必要

### 「doc.tir.ne.jpのドキュメント作成ルール」ページ
- 以下のルールを決定し、仕様化する必要がある
    - 仕訳帳ルール
        - 「journalのwikinameの日時はJSTです」とかもここに書く
    - カテゴリルール
        - カテゴリ命名基準の考え直し
            - 現在のところ、カテゴリはなんとなく「英小文字のみ」のルールにしているが、これ別に日本語とかでもいいと思うので考え直す
            - しかし ParentLink.hs の現在の仕様では、カテゴリの各ページは、「/categoryName」みたいなリンク判定になる。これを利用したいなら、wikinameと同じルールにするのがいいと思う
        - 以下の件のメモ書き
            - 今は、「技情研ネット関連のコンテンツ」は[/tir.ne.jp/]()配下に設置する、というルールでやっているが、これはカテゴリの方がいいかどうか考える → とりあえずこれに限っては、カテゴリでない方がいい、という事になった
                - 一覧を見た時に畳み込まれて、ちらかる事がない、という理由
                - 他の技術情報([/gitit]())とかもディレクトリ掘るべきかも
    - wikiname命名基準の確定
        - wikinameは可能な限り、URL encodeされない文字だけで構成する、とか
        - wikinameに「`'`」を使ってはいけない、等
    - タグルール(案)
        - 元々、pandoc変数(「\$hoge$」のようなタグ)に利用可能な文字は「英数」「`-`」「`_`」との事。よって追加するタグもこれに準拠する。
            - pandocが標準で提供しているpandoc変数は英小文字のみで構成されたものばかりとなっている。
            - gititが標準で提供しているpandoc変数も、ほとんど英小文字のみで構成されているが、例外が一つだけあり、何故か「\$pageUrl$」だけlowerCamelCaseになっている。
        - writerマクロ(\2012-09-01 22:23:37.168512 JSTのように、本文内に書くと別の文字列に置換されてから保存されるマクロ)は、全て「英大文字」のタグとする。これによって上記のpandoc変数と区別する。
        - readerマクロ(通常のpandoc変数同様、表示時に別の文字列に置換される)は、上記のpandoc変数と同じく、英小文字はじまりのタグとする。英大文字は使わない(lowerCamelCase等にはしない)方針とする。記号もなるべく使わないようにする。
        - TODO: 上記で「pandoc変数」と呼んでいるものの名称を考えなおす(大元の由来はHStringTemplateなため)
    - その他、ページ記入上でのルール
        - コミットログルール
            - 「追記」「added」だけではあまりに意味がなさすぎるので、せめて「○○(セクション名)に追記」「added to XXX」と、いじった場所名ぐらいは書く事
                - 特に、mediawiki等にある部分編集機能がgititにはないので、これを書く事でかなりコミットログが分かりやすくなると思う



## githubにテンプレート類を保存する
- 先にdocとintraのテンプレート類の統合を行いたいが、時間がかかるので、現段階ではintraのみ保存する
- 具体的に保存する対象は、plugins, static, templates、それから /etc/init.d/gitit-daemon あたり。


## 各cgiを作成
- deploy.cgi(intraからdocへ内容反映、プレビュー(diff形式？)あり)
- push.cgi(githubかどこかの外部リポジトリにpush、シェルからも実行可能)
    - この時のpush元は、内部編集用ではなく、公開側からとする事


## 技情研ネットの各サイトのメンテ
- Initializrベースでhtmlを書き直す。
    - その時に一緒にcss考え直す
- サイトの見た目は「[協力者/支持者を集める](policy#協力者支持者を集める)」事に微妙に影響する為、それなりに真面目に行う事。
    - 以下のサイトみたいなのがいいと思う。
        - [ニャンパス株式会社の技術ページ](http://nyampass.com/technic/index.html)。動いたりしなくていいので、こういうデザインにしたい。
        - [Galois社のサイト](http://corp.galois.com/)。海外で一般的な会社のデザインみたいにしたい。あとここの会社は方針とか参考にできる部分が多い。あとで取り入れられそうなものは取り入れる事。


## cssのカスタマイズ
- [#技情研ネットの各サイトのメンテ]()で先に作ったデザインを、doc.tir.ne.jpにも適用する




# gitit本体をいじる必要のあるTODO

このTODOの内、一般的な情報のものについては、完了後は[#完了したtodo]()ではなく、[/gitit]()に移動させましょう。


## LastModified.hs が、過去のrevisionを見ている時でも最新ページのタイムスタンプを表示するのを直す
- \$revision$ がある時は、それを使って日時を引くようにする


## 差分表示の時に一行の長さが長すぎてはみでるのをどうにかする

- preだから。あとでcodeとbrにするパッチを作る。実際には以下のタグになっている

        <pre class="diff"><span> ... </span></pre>


## 本番環境であるdocのsitenav.stにも、簡易リンクメニューをつける
- これはdocとintraのテンプレ統合が終わってから行う方が面倒でない


## ExportのSlidyを動くようにする。それができないなら「\$exportbox\$」から抜く方法を考える

## \*.st内における、httpからはじまるfull urlの出し方を調べ、pagetool.stのbingのところに反映
- 調べた結果、取れるインターフェースはないようだ…
    - デフォルトではhostnameシステムコールで取るらしい
    - どうしても取りたいなら自分でプラグイン作ってHost: ヘッダから取るしかなさそう

## 「ページツール」の下あたりに何かの枠を入れる
- …という案があったが、一体何の枠だったのか思い出せない、あとで思い出す事


## コードブロックのインデント量がコードブロックも横幅に依存しているのを直す
- 以下のようなコードブロックが、コードブロック内の横幅(文字数)によってインデント位置が変わる。おそらくcssで直せる。

~~~~~{.pandoc}
~~~{.haskell .numberLines}
(show $ revDateTime rev)
~~~
~~~~~

- 調べたところ、以下のようなタグになっていた。このクラスを調べる事。

~~~~~{.html}
<table class="sourceCode haskell numberLines"><tr class="sourceCode"><td class="lineNumbers"><pre>
~~~~~


# 終了したTODO

## rssの為に、公開側へのpush時にコミット内容をまとめる
- 現状だと、pushした段階で大量のコミットログがrssに流れるので、それが嫌なので
- しかしまとめると今度は編集履歴を見た時に各コミットがまざってしまって訳が分からなくなるのでは、という懸念が
    - intra側ではまざってないのでよいとする？
        - github側ではまざってるのでよくないと思う
    - 現状では、コミットログは「追記」「added」とかそんなのばかりなので、それならまざってもいいのでは
        - コミットログはちゃんと書きましょう、というルールにする事に
- 上記により、コミット内容はまとめず、そのまま公開側に反映する事になった
- ただし元々の「大量のコミットログが一度に流れる」という件はどうしようもないので、これについては[#rssについてページ]()を作成して、そこに注意点などを書く、という事にする

## markdown記法の解説ページへのリンク追加の件
- 日本語のmarkdown記法の解説ページ(可能ならpandoc版のもの)へのリンクを、編集画面内の左サイドバーに追加する
    - 英語版のリンクはもう入っている
    - 探したがpandoc版はなかった。
    - リンクつけるとしたら、 [wikipediaのmarkdown項目](http://ja.wikipedia.org/wiki/Markdown)、[全訳](http://blog.2310.net/archives/6)、[チートシート](http://qiita.com/items/c686397e4a0f4f11683d)ぐらいだが、どれも微妙な感じ
        - これを必要とするのは新しくメンバーになる人ぐらいなので、そのタイミングで入れるかどうか検討する事にする

## 見出しリンクの件
- 各見出しのリンク先は#TOCだが、それよりは自分自身を指した方が便利なので変更する
    - もしくは、見出しの末尾に自分自身を指す、リンク取得用のhrefを入れておくか
    - この処理はpandocが行っているようで、gititだけでは直せないっぽいので諦める事に

## UTC問題
タイムスタンプがUTCになっている問題は延期とする(UTCのままでokとする)。
ただし将来に対応作業を再開する可能性がある為、メモを残す。

尚、延期にする理由は「よく考えたら、あるタイムスタンプが日本の何時に書かれたものなのかパッと分かりづらいが、それが分からなくても困る人は別にいない」為。
また、万が一、技情研ネットが国際的に発展するような事になった時の事を考えると、JSTにこだわる意味もない為。

- この修正を行うべき対象は以下の通り。
    - Network/Gitit/Handlers.hs 内の showActivity と showHistory の revDateTime のある辺り
        - リビジョン情報からUTCTimeを得て、それを単にshowしているだけ。後述の問題あり
    - LastModified.hs
        - 根本的には同上。しかしプラグインなのでバリバリに手を入れて直してしまっても別に問題はない
    - Signature.hs SignatureParse.hs Date.hs DateParse.hs
        - これは現在の日時を埋め込むので個別対応してもokだし簡単にできる

- UTC問題の本質
    - gitのリビジョン情報内の日時にはタイムゾーン情報が含まれている。しかし Data.FileStore から得られるリビジョン情報はUTCTimeで日時を返している。そしてUTCTimeはタイムゾーン情報を含んでいない。
        - ここで可能な選択は二択。
            (1) 諦めてUTC固定とする
            (2) 任意のタイムゾーン(サーバに設定されているタイムゾーン)に変換する
        - 今回は前者を選んだが、後者を選んだ場合にどうなるかを記す。
            - doc.tir.ne.jp的にはJSTのみ対応でいいが、パッチとしてpull-reqするのであれば、夏時間ありのタイムゾーンにも対応させないとまずい。またpull-reqする内容が大きくなるのもよくない
            - 夏時間ありのタイムゾーン判定は面倒な事に一律で決定せず、たとえUTCであってもその日時によってタイムゾーンが変化する。これを求める方法は二つある。
                (1) Data.Time.LocalTime の utcToLocalZonedTime。これはIOとして、システムにタイムゾーンを問い合わせを行う為、現状だと純粋関数で記述されてる箇所に詰め込むのが面倒。
                (2) Data.Time.LocalTime.TimeZone.Series。これはIOではないが別途モジュールをインストールする必要があり、これを利用する場合はgitit.cabal等にも追加が必要で面倒。

実際にJSTにする為に書いたコードサンプルは以下になる。

- 「元のコード」：

~~~{.haskell .numberLines}
(show $ revDateTime rev)
                                                        
~~~

- 「自分が書いた、IOで返す関数」：

~~~{.haskell .numberLines}
import Data.FileStore (revDateTime)
import Data.Time.LocalTime (getTimeZone, utcToZonedTime)

revToDateTimeString :: Revision -> IO String
revToDateTimeString rev = do
  let dt = revDateTime rev
  tz <- getTimeZone dt
  show $ utcToZonedTime tz dt
~~~


<!-- vim:set ft=pandoc ts=4 sts=4 sw=4 et: -->
