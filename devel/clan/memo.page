---
toc: yes
categories: postponed
title: CLAN一時メモ
...

今のところ、完全に雑多なメモです。


# android関連

## プロファイルを取る

[http://labs.techfirm.co.jp/android/iguchi/2262]() を参考にした。

0. AndroidManifest.xml に以下がある事を確認

    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>

0. `(import '(android.os Debug))` する(この段階でPCでは動かなくなるので注意)

0. create に以下を入れる

    (Debug/startMethodTracing "appname")

0. dispose に以下を入れる

    (Debug/stopMethodTracing)

0. `adb pull /mnt/sdcard/appname.trace .` もしくはmonitor.bat等でローカルにコピーする
    - sdcardのpathは違う可能性がある。以下で調べられる。

        (import '(android.os Environment))
        (.getPath (Environment/getExternalStorageDirectory))

0. monitor.bat のメニューの「File」→「Open File」から、 appname.trace を開いて内容を確認する。


### プロファイル結果

どうもプロファイルが取れるのはcpu秒で数秒だけらしい。

とりあえず取ってみた結果、実機では以下が重いようだ。

- 超おもい
    - clojure/lang/Reflector.invokeInstanceMethod
    - clojure/lang/Reflector.invokeNoArgInstanceMember
    - これらの中にて、 clojure/lang/Reflector.getMethods が50%程度を占めており、また、 java/lang/reflect/ReflectionAccessImpl.clone は20%程度なものの、実行回数がむちゃくちゃ多かった

- おもい
    - clojure/core$dorun.invoke なぜか重い。loopとrecurにすべきっぽい


## コンテキストの喪失

- android実機でのみ、アプリ起動中に別アプリを開き、その後にまた戻ってきた時に、pause()→resume()が発生し、AndroidゲームプログラミングA to Zのp.270に書いてあった「GLコンテキストの喪失」が起こる。
    - この時に、ファイルからコンストラクトしたTextureは自動的に再生成されるようになっているが、そうでない動的に生成したTextureは再生成されない。
    - またこの時に、Texture内部idの再配布(再利用あり)が行われる為、前述の「再生成されなかったTexture」は、再読み込みされたTextureのどれかが割り当たる現象が起こる
        - 正確には違うかも。しかしとにかく内部のtexture idがおかしくなる
    - 何も考えずに、「なくなったならdispose()してもいいよね」と考えてdispose()してしまうと、前述の別のTextureがdispose()されてしまい、おかしくなる。なのでdispose()してはいけない。
        - 正しくdispose()する事にこだわるなら、pause()時にすべきなのか？
        - これでメモリリークになるのかどうかは未調査


# clojure関連

- clojureのマクロは、classファイルへコンパイルする場合は、そのコンパイル時にマクロが評価される事に注意が必要！classファイルのロード時とかではないので注意する(下手すると開発環境の値固定になってしまったりする)

- 別スレッドでevalがうごかないかもしれない。
    - 何故なら、evalをするにはneko.compilation/initを呼ぶ必要があるが、そこではvarにパラメータを保存している為。
    その場合は別スレッドでevalするまえにneko.compilation/initを呼ぶようにすれば動くと思うが、その際にディレクトリ指定はclasses以外にする事。
        - classesはCLANが自動的に設定している為。neko.compilation/initは指定されたディレクトリを消すので、衝突すると多分動かなくなる




# libgdx関連

- libgdxでは基本的に小数は全部floatなので、引数エラーになったら数値を(float x)してみる


# java関連

- jarの仕様で、 assets 内のファイルもコンパイルしたファイルもいっしょくたに同じディレクトリに入れられてしまうので、これらの名前が衝突しないようにした方がいいです(いっしょくたになっても別にいいなら気にしなくてもいいですが…)。java sucks.
    - この為、clojureのパッケージであっても、java風の「jp.ne.example...」とか「com.example...」みたいなパッケージ名にした方がいいです。assets内に「jp」とか「com」とかのディレクトリを掘る事はまず無いと思うので。
    - またassets内にファイルを直置きせずに、ディレクトリを一段掘ってその中に入れるとよいでしょう。
    - 作ったjarが具体的にどういう構造になってるかは、 `jar tf path/to/xxx.jar` もしくは `mkdir hoge && cd hoge && jar xf path/to/xxx.jar` してみると確認できます。


# maven関連

## pom.xmlのディレクトリ区切り文字

- 正式には、 `${file.separator}` 。
    - 「/」でも大体問題はないが、windowsではapk生成等の一部でこけるので、その時はこれに直す事。


# その他

## ライセンスについて

CLANで何か作って配布する場合、それにはclojureやらlibgdxやらを含むので、それら全部のライセンスをチェックする必要がある。

- clojure(オリジナル)
    - Eclipse Public License 1.0
    - Copyright (c) Rich Hickey. All rights reserved.
    - [http://clojure.org/license]()

- clojure(android版)
    - Eclipse Public License 1.0 + Apache License 2.0
    - Copyright (c) Rich Hickey. All rights reserved.
    - [https://github.com/sattvik/clojure]()
    - http://www.tldrlegal.com/compare?a=Apache+License+2.0+(Apache-2.0)&b=Eclipse+Public+License+1.0+(EPL-1.0)

- libgdx
    - Apache License 2.0
    - copyrightは誰にしておけばいいのかは不明、[AUTHORS](https://github.com/libgdx/libgdx/blob/master/gdx/AUTHORS)では、Mario Zechnerと Nathan Sweet になっている
    - [http://www.badlogicgames.com/wordpress/?p=777]()

- android
    - 通常のapkはこれは含まない(実機に入ってるライブラリを使う)が、clojureのandroid版が動的コンパイルの為にandroid由来のdx.jarを含む為、CLANで作ったものにもdx.jarが含まれる。
    - Apache License 2.0
    - copyrightはgoogleでいいのか？

- neko:
    - Eclipse Public License 1.0
    - Copyright (c) 2011 Sattvik Software & Technology Resources, Ltd. Co.
    - Forked by Alexander Yakushev as part of Google Summer of Code 2012 participation project.

- launch4j
    - BSD + MIT
    - Copyright c 2005-2012 Grzegorz Kowal
    - [http://launch4j.sourceforge.net/]() の一番下


## 素材、assets回り
TODO: あとでリンク化する事

画像

- カメラで家の中にあるものを撮影してgimpで加工(デザインとか肖像権とか権利ありそうなものには注意)
- gimpで一からドット絵作成
- 保存はgimpのxcf、エクスポートはpngで透過あり(libgdxでいうところのRGBA8888)

アイコン

- 基本的に画像と同じ。背景が白でも黒でも認識できる必要あり。
- 必要とされる状況とサイズは以下の通り
    - android向け(res/drawable-*): 96x96, 72x72, 48x48, 36x36
    - desktop向け起動後プロセスアイコン(サンプルではassets/icon): 128x128, 32x32, 16x16
    - desktop向けexeアイコン(l4j/windows.ico): 48x48, 32x32, 16x16
- windows向けのicoはgimpのエクスポートで作る。 [http://osima.jp/blog/windows-icon/index.html]()

BGM

- midiシーケンサで適当に作る
- kaosillatorにたよる
- 自分で楽器をひいて録音する等
- audacityで編集、調整
- ogg一択

効果音

- libgdxでは、長さは最大で5秒程度らしい
- mp3は不具合があるとの事、oggかwavかで(最近のバージョンでは直った？)
- 暇な時にsfxrとlabChirpで大量生産し、「このアクションのSEが欲しいな」と必要になった時に、大量生産した奴を順番に再生し、それっぽい奴を選ぶ
- BGMと同様に録音してもよい
- audacityで音量、時間、フェードアウト等を最終調整




<!-- vim:set ft=pandoc ts=4 sts=4 sw=4 et: -->
