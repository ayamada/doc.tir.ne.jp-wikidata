---
toc: yes
title: CLAN : Clojure, LibGDX, Android, Neko application construct kit
...


Sorry, I am rewriting this document now. Old document (for version 0.0.6) is here. -> [clan/0.0.6]()

現在ドキュメントの書き直し中です。古いバージョン(0.0.6ベース)のドキュメントはこちらにあります→[clan/0.0.6]()

----

<div style="text-align:center"><img src="/devel/clan/logo_b.png" /></div>

**CLAN : Clojure, LibGDX, Android, Neko application construct kit**

**CLAN : Clojure, LibGDX, Android, Neko アプリケーション構築キット**


Abstract
========

- CLAN is ...
    - If you write [LibGDX](http://libgdx.badlogicgames.com/)'s [ApplicationListener](http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/ApplicationListener.html) by **Clojure**, then CLAN can run this.
      And, CLAN can deploy to jar(for many desktop OS with Java), exe(for Windows with Java), apk(for Android).
        - Therefore, you shall be able to understand LibGDX and Clojure, if you want to use CLAN.
    - CLAN can use nREPL.
        - but it is very inconvenience, because it have some problems that [http://badlogicgames.com/forum/viewtopic.php?t=9400&p=42716]().
    - CLAN have splash screen on loading Clojure at boot.
        - Can replace logo image.
    - CLAN is completely CLI (unnecessary GUI).
    - CLAN work on UNIX like OS, Mac, and Windows!

----

**概要**

- CLANとは
    - [LibGDX](http://libgdx.badlogicgames.com/)の[ApplicationListener](http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/ApplicationListener.html)を「Clojureで」書いたものを、実行させたり、jarやexeやapkにデプロイしたりする事のできる開発キットです。
        - よって、CLANを使いたい人はLibGDXとClojureを理解している必要があります。
    - nREPLが使える
        - ただしかなり不便、問題点は [http://badlogicgames.com/forum/viewtopic.php?t=9400&p=42716]() に書いてある
    - プロセス起動時のClojureロード時に起動ロゴ等の画像を表示する機能あり
        - ロゴ画像は入替可能
    - 完全にcliベースでのビルドやデプロイが可能(gui環境不要)
    - unix風環境、mac、windows環境でも動く！


Repository
==========

- [https://github.com/ayamada/clan]()


Child pages
===========
(sorry, these pages are written in japanese)

- [clan/introduction](): 別に読まなくてもよい前書き
- [clan/libgdx](): libgdxメモ
- [clan/license](): 沢山のソフトが結合した結果、大変な事になったライセンス解説
- [clan/assets](): アセット回りの話
- [clan/memo](): 雑多なメモ。とりあえず何でもここに書く。あとで分類する予定。


Requirement
===========

- Commonly-used CLI environment
    - sh, GNU make(gmake), GNU autotools(autoconf), wget, unzip
        - If you use Windows, these are in [MinGW/MSYS](http://www.mingw.org/).
            - But, you will be update wget's cert, maybe.
- [JDK 1.6](http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-javase6-419409.html) or [OpenJDK 1.6](http://openjdk.java.net/)
    - If you build Android's apk, you must use 1.6, NOT 1.7 (Android SDK requires 1.6)
    - If you don't build Android's apk, you can use 1.7
- [JRE 1.6 or later (recommend 1.7)](http://java.com/en/download/) or [OpenJDK Runtime Environment](http://openjdk.java.net/)
- [Leiningen](https://github.com/technomancy/leiningen/)
- (optional) [Android SDK](http://developer.android.com/sdk/) (for Android's apk)
- (optional) [Launch4j](http://launch4j.sourceforge.net/) (for Windows' exe)

I look see that CLAN worked on Microsoft Windows Vista(x86-32bit), and Gentoo Linux(x86-32bit) on 2013/02/28.

----

**必要なもの**

- 一般的なCLI環境
    - sh, GNU make(gmake), GNU autotools(autoconf), wget, unzip
        - windows環境の場合は、[MinGW/MSYS](http://www.mingw.org/)に全て入ってます
            - ただし、おそらく[wgetのcertを更新しておく](http://d.hatena.ne.jp/bellbind/20110612/1307848645)必要があります
- [JDK 1.6](http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-javase6-419409.html) か [OpenJDK 1.6](http://openjdk.java.net/)
    - もしandroid用apkをビルドしたい場合、バージョンは1.6でないといけません(android sdkが1.6でないと動かない為)。
    - android用apkが不要な場合は1.7でokです
- [JRE 1.6 もしくはそれ以降 (1.7推奨)](http://java.com/en/download/) もしくは [OpenJDK Runtime Environment](http://openjdk.java.net/)
- [Leiningen](https://github.com/technomancy/leiningen/)
- (optional) [Android SDK](http://developer.android.com/sdk/) (android用apkを生成したい場合のみ)
- (optional) [Launch4j](http://launch4j.sourceforge.net/) (windows用exeを生成したい場合のみ)

2013/02/28 に、windows vista(32bit)とgentoo(x86-32bit)上にてサンプルプロジェクトのビルドが動作する事を確認しています。

windows環境での各種のインストールについては、 [env]() が参考になるかもしれません。


Usage
=====

**使い方**

## Prepare to develop and run sample application for test

**開発準備とサンプルアプリ実行テスト**

### Spreading project directory

~~~{.bash .numberLines}
mkdir -p package/projname
cd package/projname
git clone https://github.com/ayamada/clan.git
(cd clan && git checkout 0.1.0)
sh clan/script/spread_current_dir.sh
~~~

- You decide `package` and `projname` as you likes
- You decide target of checkout from [git tag](https://github.com/ayamada/clan/tags)
- Run `clan/script/spread_current_dir.sh`, then spread many files to `package/projname/`
- There is assumed below directory strucuture.
    - **`package/projname/clan/` :** CLAN main unit, you don't need to edit in this directory.
    - **`package/projname/` :** there is in your application project files.
        - Check to [#directory-structure]() for details.
    - **`package/` :** You can set Makefile(or other script) for distributing built files(jar/exe/apk) by youself. (optional)
        - For example: zipping exe and README.txt, push apk to google play, etc...
    - **`package/.git`** or **`package/projname/.git` :** save your project to git (or other revision-control-system) local repository. (optional)
        - `clan/script/spread_current_dir.sh` makes `package/projname/.gitignore`, that exclude to `package/projname/clan/` .

----

**プロジェクトディレクトリの展開**

~~~{.bash .numberLines}
mkdir -p package/projname
cd package/projname
git clone https://github.com/ayamada/clan.git
(cd clan && git checkout 0.1.0)
sh clan/script/spread_current_dir.sh
~~~

- `package` と `projname` を好きに決めます。
- [git tag](https://github.com/ayamada/clan/tags) を見て、どのバージョンをcheckoutするか決めます。
- `clan/script/spread_current_dir.sh` を実行します。すると `package/projname/` の中に大量のファイルが展開されます。
- これらは以下のようなディレクトリ構成を想定しています。
    - **`package/projname/clan/` :** CLAN本体、あなたがこの中をいじる必要は通常はありません
    - **`package/projname/` :** あなたのアプリのプロジェクトのファイルはこの中に置きます。
        - [#directory-structure]() に詳細があります。
    - **`package/` :** ここに、リリース向けとして生成した jar, exe, apk を配布向けにパッケージングする為の Makefile(もしくは他のスクリプト等)を自由に置く事ができます(optional)
        - 例: exeファイルとREADME.txtをセットでzipに固める。apkファイルをgoogle playにpushする。等々…
    - **`package/.git`** もしくは **`package/projname/.git` :** あなたのプロジェクトをgit(もしくは他のリビジョン管理システム)に保存する為の何かも設置できます(optional)
        - `clan/script/spread_current_dir.sh` スクリプトは `package/projname/.gitignore` も生成します。これには `package/projname/clan/` を除外する設定が入っています。


### Build and run sample application on desktop

~~~{.bash .numberLines}
autoconf && ./configure
make run
~~~

This sample application is named "drop" or "space drop".

(This game rule is based on [http://code.google.com/p/libgdx/wiki/SimpleApp](), I rewrite by Clojure and add more gimmics. )

CLAN's `BootLoader.java` control as long as display boot-logo.

- This is for loading clojure on background.
- You can change boot-logo image file and boot-jingle sound file at later.

If "drop" works done, then finish application process, and go next.

(I explain to description of `autoconf && ./configure`, and targets of `make`, but it is at later.)

This is run application with nREPL.

~~~{.bash .numberLines}
make repl
~~~

But, it take very long time at boot, and that cannot rerun in nREPL.
I guess, will use `make run` for almost develop.
And, will use `make repl` for chase to very difficult bugs.

- See [http://badlogicgames.com/forum/viewtopic.php?t=9400&p=42716]().

The sample application's source code is in `src/drop/main.clj`.

Read this, and input to nREPL console as you likes.

(For example, change and input to `(def speed-level 100)`, `(def item-spawn-interval 100000000000)`, etc...)

If you see to work nREPL, then finish application process, and go next.

----

**サンプルアプリをデスクトップ上で実行してみる**

~~~{.bash .numberLines}
autoconf && ./configure
make run
~~~

このサンプルアプリは「drop」「space drop」という名前です。

(このゲームは [http://code.google.com/p/libgdx/wiki/SimpleApp]() をベースにClojureで書き直し、色々な要素を追加しています)

アプリが起動すると、起動ロゴが表示されている間はCLANの `BootLoader.java` が制御を握ります。

- ロゴの出ている間、バックグラウンドではclojureのローゴが行われています
- 起動ロゴや起動音の差し替えができます。

サンプルアプリがちゃんと動いているようなら、アプリを終了して次に進んで下さい。

( `autoconf && ./configure` の詳細や make のターゲットについてはまた後で解説します。)

nREPL経由でサンプルアプリを実行する事もできます。

~~~{.bash .numberLines}
make repl
~~~

しかし、nREPL経由だと起動までに非常に時間がかかり、しかもnREPL中には一回しかアプリ起動ができません。
なので、通常の開発時は主に`make run`を使って開発を行い、`make repl`を使うのは難しいバグを追跡している時だけにするのが良いと思います。

- [http://badlogicgames.com/forum/viewtopic.php?t=9400&p=42716]() に、この件が少し書かれています。

サンプルアプリのソースは `src/drop/main.clj` にあります。

これを見ながら、nREPLのコンソールを色々と試してみてください。

(例えば、ソースから「`(def speed-level 100)`」「`(def item-spawn-interval 100000000000)`」のようなところを拾ってきて、数値を変更してnREPLに入力してみるとか)

nREPLが一応動いているのを見たら、アプリを終了して次に進んでください。

### Build and run sample application on android

(optional)

If you install Android SDK, you can run sample application on android.

(You shall connect Android-debug-usb, or run Android emulator)

~~~{.bash .numberLines}
make android-run
~~~

To build for Android need very large memory(over 1G) and minutes(over 5min?).

----

**サンプルアプリをandroidで実行してみる**

(オプショナル)

android sdkをインストールしているなら、サンプルアプリをandroid上で動かす事ができます。

(ただし先に、androidデバッグusb接続をしておくか、エミュレータを起動しておいてください)

~~~{.bash .numberLines}
make android-run
~~~

android向けのビルドは(デスクトップ向けと比べて)非常に多くのメモリ(1G以上)と時間(5分ぐらい？)が必要になります。

### Clean up sample application

~~~{.bash .numberLines}
make distclean
~~~

Delete almost temporary files and clean up to sample application.

----

**サンプルアプリのクリア**

~~~{.bash .numberLines}
make distclean
~~~

ほとんどの一時ファイルを消し、サンプルアプリをクリアします。


## Develop your application

1. Edit `configure.ac` file
    - Do you know `autoconf`? It is not difficult.
        - `dnl` is comment
        - `AC_INIT()` is to define artifactId and version
        - `FOO="string"` is to define local variables
        - `AC_SUBST()` is to define project variables
        - If you execute `autoconf && ./configure` command, then that generate from `*.clj.in` to `*.clj`.
            - At which time, a string as `@FOO@` in `*.clj.in` was replaced to project variables by defined `AC_SUBST()`.
    - You modify in section of `dnl Defines` in file `configure.ac` for your application.

2. Edit `layout/Desktop.java.in`, `layout/MainActivity.java.in` and `android/AndroidManifest.xml.in`
    - If you don't want to deploy Android's apk, then you can ignore `layout/MainActivity.java.in` and `android/AndroidManifest.xml.in`.
    - A file `layout/Desktop.java.in` is boot entry class for desktop build. It is relocate to `desktop/src-java/(PROJECT_GROUPID)/Desktop.java`.
        - If you want to customize LWJGL process or configuration of CLAN, then you can edit this.
    - A file `layout/MainActivity.java.in` is boot entry class for android build. It is relocate to `android/src-java/(PROJECT_GROUPID)/MainActivity.java`.
        - If you want to customize Android process or configuration of CLAN, then you can edit this.

3. Discard source of sample application `src/drop/`, and create source of your application `src/...`
    - For example, if you deside `PROJECT_CAL_GENERATOR_CLASS` in `configure.ac` to "my.app.main", then you shall create `src/my/app/main.clj`. This file is main sources of your application. You can put also other source files too, of course.
    - For example, if you deside `PROJECT_CAL_GENERATOR_FN` in `configure.ac` to "generate-al", then you shall write to function like `(defn generate-al [] (proxy [ApplicationListener] [] ...)` in `src/my/app/main.clj`.
        - It is smallest application code only flashing screen.

            ~~~
            (ns my.app.main
              (:import
                (com.badlogic.gdx Gdx ApplicationListener)
                (com.badlogic.gdx.graphics GL10)))
            (defn generate-al []
              (proxy [ApplicationListener] []
                (create [] nil)
                (resume [] nil)
                (resize [w h] nil)
                (render []
                  (.. Gdx gl (glClearColor (rand) (rand) (rand) 1.0))
                  (.. Gdx gl (glClear GL10/GL_COLOR_BUFFER_BIT)))
                (pause [] nil)
                (dispose [] nil)
                ))
            ~~~

4. Edit `project-common.clj.in`
    - If you want to import/use external libraries to your project from clojars.org and other repos, then add external libraries to `dependencies-common` in `project-common.clj.in`.
        - If you want to add only desktop/android, add to `dependencies-desktop` `dependencies-android` in `project-common.clj.in`.

5. Execute `autoconf && ./configure`
    - It generate from `path/to/foo.suffix.in` to `path/to/foo.suffix`.
    - If you change `*.in` files later, then you must execute `autoconf && ./configure` again, you don't forget it.
        - Added to which, if you change `layout/*.in` files, then you must execute `make layout-clean layout`. Because, these files must relocate to `desktop/src-java/...` or `android/src-java/...`.

6. Remove resources of sample application, and put resources of your application
    - `desktop/assets/`
        - Put in here to your application's resources(image files, sound files, and other).
            - How to get out to resouces from here: `(.. Gdx files (internal "assets/filename.suffix"))`
        - This is in `desktop/`, but this is also used for Android too.
    - `desktop/assets/cbl_logo.png` and `desktop/assets/cbl_jingle.ogg`
        - These are used by BootLoader.java as default (see `layout/*.in`).
        - If these files not exists, then not display logo-image, or not play jingle-sound.
    - `desktop/assets/process_icon/`
        - This is include process-icon files for LWJGL (see `layout/Desktop.java.in`).
            - If not exists, be used to LWJGL default process-icon.
    - `textures/`
        - If you put image files into `textures/`, then these is packed by [TexturePacker](http://code.google.com/p/libgdx/wiki/TexturePacker) to `desktop/assets/pack.{atlas,png}` automatically.
            - You can do `make ta` to pack any time.
        - If you don't use TextureAtlas, then you will clear out this.
    - `android/res/`
        - Icons for Android.
    - `l4j/windows.ico`
        - Icon for Windows.
        - You can make icon for windows by GIMP.

7. Execute `make run`
    - Build and run your application.
    - If it don't work, unexpected work, raised error, then you may fix your code, and retry `make run`.
        - Or it is bug of CLAN. [Check and post issues](https://github.com/ayamada/clan/issues).
        - If you update to `src/...` then you can retry `make run` directly, but if you update to outside of `src/...` then you may execute `make clean` and `make run` for safety.
    - I describe targets of `make` later.

8. Execute `make android-run` (optional)
    - You shall install Android SDK, and you shall connect Android-debug-usb or run Android emulator before `make android-run`.
    - This require time and memory.

----

**自分のアプリを開発する**

1. `configure.ac` ファイルを編集する
    - `autoconf` は分かりますか？難しくはないです。
        - `dnl` は一行コメント
        - `AC_INIT()` で、 artifactIdとバージョンを定義
        - `FOO="string"` で、ローカル(configure.ac内)変数を定義
        - `AC_SUBST()` で、プロジェクト変数を定義
        - `autoconf && ./configure` を実行する事で、 `*.clj.in` のようなファイルから `*.clj` が生成される。
            - この時、 `*.clj.in` 内にある `@FOO@` のような文字列は、 `AC_SUBST()` で定義した変数の内容に置換される。
    - `configure.ac` 内の `dnl Defines` の各変数の内容を、あなたのアプリ用に変更しておいてください。

2. `layout/Desktop.java.in` `layout/MainActivity.java.in` `android/AndroidManifest.xml.in` を編集する
    - android用apkを生成しないのであれば、 `layout/MainActivity.java.in` `android/AndroidManifest.xml.in` は無視してよいです。
    - `layout/Desktop.java.in` にはdesktop向けビルド時の起動クラスが入っています。このファイルから生成される `Desktop.java` は、 `desktop/src-java/(PROJECT_GROUPID)/Desktop.java` に再配置されます。
        - このファイルを編集する事で、desktop向けのLWJGLプロセスの設定をいじる事ができます。
    - `layout/MainActivity.java.in` にはandroid向けビルド時の起動クラスが入っています。このファイルから生成される `MainActivity.java` は、 `android/src-java/(PROJECT_GROUPID)/MainActivity.java` に再配置されます。
        - このファイルも同様に、androidプロセス等の設定をいじれます。

3. `src/drop/` に入っているサンプルアプリのソースを捨て、 `src/...` として、あなたのアプリのソースを入れます。
    - 先ほどの `configure.ac` にて、 `PROJECT_CAL_GENERATOR_CLASS` に "my.app.main" を指定した場合、あなたは `src/my/app/main.clj` を書く事になります。勿論、このファイルから参照する他の `*.clj` を一緒に含めても問題ありません。
    - また同様に、先ほどの `configure.ac` にて、 `PROJECT_CAL_GENERATOR_FN` に "generate-al" を指定した場合、あなたは `src/my/app/main.clj` の中に「`(defn generate-al [] (proxy [ApplicationListener] [] ...)`」のような関数を書く必要があります。
        - 以下は画面をフラッシュさせるだけの最小限のアプリのソースです。

            ~~~
            (ns my.app.main
              (:import
                (com.badlogic.gdx Gdx ApplicationListener)
                (com.badlogic.gdx.graphics GL10)))
            (defn generate-al []
              (proxy [ApplicationListener] []
                (create [] nil)
                (resume [] nil)
                (resize [w h] nil)
                (render []
                  (.. Gdx gl (glClearColor (rand) (rand) (rand) 1.0))
                  (.. Gdx gl (glClear GL10/GL_COLOR_BUFFER_BIT)))
                (pause [] nil)
                (dispose [] nil)
                ))
            ~~~

4. `project-common.clj.in` を編集する
    - clojars.org等から外部ライブラリをimportしたい場合、このファイルの中の `dependencies-common` に追加します。
        - ただし、desktop向け/android向け限定にしたい場合は、 `dependencies-dependencies` もしくは `dependencies-android` に追加します。

5. `autoconf && ./configure` を実行する
    - 先ほどの説明通り、これで `path/to/foo.suffix.in` から `path/to/foo.suffix` が生成されます。
    - この後でもし `*.in` ファイルの内容を変更した時は、必ず忘れずに `autoconf && ./configure` を再実行してください。そうしないと変更内容が反映されません。
        - なお、もし変更したファイルが `layout/*.in` だった場合、上記に加えて `make layout-clean layout` も実行する必要があります。これは、 `layout/` 配下のファイルは `desktop/src-java/...` 等に再配置される必要があるからです。

6. 以下の各ディレクトリに入っているサンプルアプリのリソースを削除し、代わりにあなたのアプリのリソースを入れます
    - `desktop/assets/`
        - ここにはアプリ自体が利用する各種のリソースファイル(画像、サウンド、その他各種何でも)を入れます。
            - 入れたリソースファイルを取り出すには「`(.. Gdx files (internal "assets/filename.suffix"))`」のように指定します。
        - このディレクトリは `desktop/` の中にありますが、desktop向けに限らず、android向けの場合でもこのディレクトリが参照されます。
    - `desktop/assets/cbl_logo.png` と `desktop/assets/cbl_jingle.ogg`
        - この二つのファイルは BootLoader.java が起動ロゴ/起動SEとして使用します。このファイル名は変更可能です(`layout/*.in` を見てください)。
        - これらのファイルが存在しない場合は、単に起動ロゴは表示されず、起動SEも再生されないだけです。
    - `desktop/assets/process_icon/`
        - ここにはLWJGL(desktopプロセス)用のアイコンを入れます(これも `layout/Desktop.java.in` でファイル名を変更できます)。
            - このアイコンがない場合、LWJGLロゴのデフォルトアイコンが使われます。
    - `textures/`
        - ここに画像ファイルを入れると、ビルド時に自動的に [TexturePacker](http://code.google.com/p/libgdx/wiki/TexturePacker) が実行され、 `desktop/assets/pack.{atlas,png}` として生成されます。
            - `make ta` を実行する事で、いつでも再生成が可能です。
        - 上記のTextureAtlasを使わない場合は、このディレクトリは空にしておけばokです。
    - `android/res/`
        - android用アプリアイコンを入れます。
    - `l4j/windows.ico`
        - windows用アイコンを入れます。
        - windows用アイコンは[GIMPで作れます](clan/assets#アイコン)。

7. `make run` を実行する
    - あなたのアプリをビルドし、その後に起動します。
    - もしうまく動かなかったり、予想と違う動きをしたり、エラー例外を投げたりした場合、ソースを修正してからまた `make run` を実行してみてください。
        - もしくはCLANのバグかもしれません。[githubのissues](https://github.com/ayamada/clan/issues)をチェックしたり投稿したりしてみてください。
        - `src/...` の中を修正した時は `make run` を再実行するだけでokですが、 `src/...` の中以外を修正した時は、念の為に `make clean` してから `make run` した方がよいです。
    - `make` の他のターゲット指定についてはまた後で説明します。

8. `make android-run` を実行する(optional)
    - 実行前にandroid sdkをインストールし、androidデバッグusb接続もしくはandroidエミュレータ起動をしておいてください。
    - これには結構な時間と大量のメモリが必要です。


## Release your application

**自分のアプリをリリースする**

### Prepare for release

1. Edit `configure.ac`
    - Change version string for release
    - Increment `PROJECT_ANDROID_VERSIONCODE` (for Android's apk)

2. Edit `android/AndroidManifest.xml.in`
    - Change enable/disable `INTERNET` and other `uses-permission` if needed

3. Make release-tag or release-branch (if needed)

4. Do `autoconf && ./configure`

----

**リリース準備**

1. `configure.ac` をいじる
    - バージョン文字列をリリース用に変更
    - `PROJECT_ANDROID_VERSIONCODE` を増やす(android用)

2. `android/AndroidManifest.xml.in` をいじる
    - 必要に応じて `INTERNET` やその他の `uses-permission` 項目の有効/無効を変更する

3. 必要に応じて、リリースタグやリリースブランチを作成

4. ファイルをいじったので、 `autoconf && ./configure` を実行

### Build jar of release-version for desktop

~~~
make release-jar
~~~

And, built `target/{artifactId}.jar`.

NOTE: It include `make desktop-clean` for safety.

----

**リリース版のデスクトップos向けjarをビルドする**

~~~
make release-jar
~~~

これで `target/{artifactId}.jar` が生成される。

注意：この際に、安全の為に `make desktop-clean` が実行されます。

### Build exe of release-version for windows

It is required to [Launch4j](http://launch4j.sourceforge.net/).

~~~
make release-exe
~~~

And, built `target/{artifactId}.exe` from `target/{artifactId}.jar`.

----

**リリース版のwindows向けexeをビルドする**

[Launch4j](http://launch4j.sourceforge.net/) が必要です。

~~~
make release-exe
~~~

これで `target/{artifactId}.jar` から `target/{artifactId}.exe` が生成される。

### Build apk of release-version for android

It is required this list.

- Install [Android SDK](http://developer.android.com/sdk/)
- You will generate your [private key](http://developer.android.com/tools/publishing/app-signing.html#cert)
    - **This key shall need args `-keyalg RSA`**, NOT `DSA` (WARNING: default is `DSA` in some OS). This is constraint by [lein-droid](https://github.com/clojure-android/lein-droid).
- You will edit `ANDROID_SDK_PATH`, `ANDROID_KEYSTORE_PATH` and `ANDROID_KEY_ALIAS` in `configure.ac`, and do `autoconf && ./configure`.
    - It is NOT in `~/.lein/profiles.clj` now, sorry.

~~~
make release-apk
~~~

It takes long time, and it ask to password for private key in midstream.

And, built `target/{artifactId}.apk`.

NOTE: It include `make android-clean` for safety.

----

**リリース版のandroid向けapkをビルドする**

以下が必要です。

- [Android SDK](http://developer.android.com/sdk/) のインストール
- [private key](http://developer.android.com/tools/publishing/app-signing.html#cert) の生成
    - **生成時に `-keyalg RSA` の引数を渡す必要があります**、 `DSA` では駄目です(注意：osによってはデフォルト値が `DSA` になっています)。これは[lein-droid](https://github.com/clojure-android/lein-droid)の制約です。
- `configure.ac` を編集し、 `ANDROID_SDK_PATH` `ANDROID_KEYSTORE_PATH` `ANDROID_KEY_ALIAS` を適切に設定し、 `autoconf && ./configure` を実行します。
    - 現在のところ、これらの設定を `~/.lein/profiles.clj` で行う事はできません。ごめんなさい。

~~~
make release-apk
~~~

時間がかかります。また途中でパスワードが聞かれます。

これで `target/{artifactId}.apk` が生成されます。

注意：この際に、安全の為に `make android-clean` が実行されます。

### Build all

~~~
make release
~~~

And, built `target/{artifactId}.jar`, `target/{artifactId}.exe` and `target/{artifactId}.apk`.

(NOTE: It need password for apk too)

----

**リリース版のjar, exe, apkを一度にビルドする**

~~~
make release
~~~

これで `target/{artifactId}.jar` `target/{artifactId}.exe` `target/{artifactId}.apk` が生成されます。

注意：リリース版apk生成を含むので、やはり途中でパスワード入力が必要です。

### Other work for release

- Do final check to built files.
- Packaging for distribution (if needed)
- Register Google Play and other distribution site (if needed)
- Change files for devel (if needed)
    1. Edit `configure.ac` for version string
    2. Edit `android/AndroidManifest.xml.in`
    3. Do `autoconf && ./configure`

----

**その他のリリース作業**

- 生成されたファイルを動かしてみて、最終チェックを行います。
- 必要に応じて、配布用にパッケージングします(README.txtを同梱したり等)。
- 必要に応じて、google playに登録したり、配布サイトに設置したりします。
- 必要に応じて、リリース向けに変更していた部分を開発向けに戻します。
    1. `configure.ac` のバージョン文字列など
    2. `android/AndroidManifest.xml.in` の `uses-permission` など
    3. 変更したら、 `autoconf && ./configure` を実行


Directory structure
===================

I suppose to setup by [#spreading-project-directory]() (there is in `package/projname/`).

- **`package/projname/clan/`** : CLAN main unit, you don't need to edit in this directory.
    - **`package/projname/clan/cbl/`** : BootLoader.java, claninfo.clj and clanutil.clj are in here.

- **`package/projname/.gitignore`** : it exclude to `package/projname/clan/` from your project's `.git/`.

- **`package/projname/src/`** : your source is in here.
- **`package/projname/src-java/`** : your java source is in here(optional).

- **`package/projname/desktop/`** : There is to build for desktop, and debug-run environment.
    - **`package/projname/desktop/assets/`** : There is enclose any resource files for your app. Not only for desktop but also for Android.
        - **`package/projname/desktop/assets/cbl_logo.png`** : boot-logo
        - **`package/projname/desktop/assets/cbl_jingle.ogg`** : boot-se
        - **`package/projname/desktop/assets/pack.atlas`** : generated by TexturePacker from `package/projname/textures/`
        - **`package/projname/desktop/assets/pack.png`** : ditto
        - **`package/projname/desktop/assets/process_icon/`** : There is enclose process icons for desktop
        - **`package/projname/desktop/assets/drop/`** : resources for sample app (it isn't need for your app, can be discarded)

- **`package/projname/android/`** : There is to build for Android.
    - **`package/projname/android/res/`** : There is enclose res for Android

- **`package/projname/l4j/`** : There is for launch4j.

- **`package/projname/layout/`** : There is enclose to boot entry class

- **`package/projname/textures/`** : There is enclose to source images of [TexturePacker](http://code.google.com/p/libgdx/wiki/TexturePacker) (see [#develop-your-application]()).

- **`package/projname/tmp/`** : There is temporary directory for expand libgdx.

- **`package/projname/target/`** : There is enclose to target files like `app.jar`, `app.exe`, `app.apk` (and related other temporary files) for release.

----

**ディレクトリ構造**

[#spreading-project-directory]() でのセットアップを前提としています(`package/projname/` に配置している想定です)。

- **`package/projname/clan/`** : CLAN本体、基本的にはいじる必要はありません。
    - **`package/projname/clan/cbl/`** : BootLoader.java claninfo.clj clanutil.clj が入っています

- **`package/projname/.gitignore`** : あなたのプロジェクトの `.git/` から、 `package/projname/clan/` を除外する設定が含められています

- **`package/projname/src/`** : ここにあなたのclojureコードを入れます
- **`package/projname/src-java/`** : ここにあなたのjavaコードを入れます(オプショナル)

- **`package/projname/desktop/`** : デスクトップ向けビルド用、兼、開発時実行環境
    - **`package/projname/desktop/assets/`** : あなたのアプリが参照する各種のリソースファイル置き場。android向けビルドでもここが参照される
        - **`package/projname/desktop/assets/cbl_logo.png`** : 起動ロゴ
        - **`package/projname/desktop/assets/cbl_jingle.ogg`** : 起動効果音
        - **`package/projname/desktop/assets/pack.atlas`** : 後述の `package/projname/textures/` から生成される、 TextureAtlas 用のファイル
        - **`package/projname/desktop/assets/pack.png`** : 同上
        - **`package/projname/desktop/assets/process_icon/`** : desktop向けプロセスアイコン置き場
        - **`package/projname/desktop/assets/drop/`** : サンプルアプリ用のリソース一式。捨ててよい

- **`package/projname/android/`** : android向けビルド用
    - **`package/projname/android/res/`** : androidのres置き場

- **`package/projname/l4j/`** : launch4j用

- **`package/projname/layout/`** : デスクトップ/androidの各ブート部分が入っている

- **`package/projname/textures/`** : [TexturePacker](http://code.google.com/p/libgdx/wiki/TexturePacker)でpackする元画像置き場(詳細は[#develop-your-application]()参照)

- **`package/projname/tmp/`** : libgdx配布物を展開する一時ディレクトリ

- **`package/projname/target/`** : リリース版の `app.jar` `app.exe` `app.apk` およびリリースに関連する一時ファイル置き場


<!--



TODO: claninfo.cljおよびclanutil.cljの使い方も書く事
TODO: 古いドキュメントと比べてみて、必要な情報が抜けてないか確認する事
TODO: nekoのつかいかたについてもかく


その他
======

### 用語について

- clan : この構築キット、配布物一式、ディレクトリ名
- cal : CLAN ApplicationListener。アプリ本体、これを主にいじる。 cal/ が実体
- cbl : CLAN BootLoader。ブート画面部分。clan/cbl/ 内にソースあり



### CLAN自体の情報を取得する

- clan/info/ によって、 jp.ne.tir.clan.Info が提供されます。
- 詳細については、 `clan/info/src/main/java/jp/ne/tir/clan/Info.java.in`
  を確認してください。しかし実際に使う可能性があるのは `Info/debug`,
  `Info/buildNumber`, `Info/BuildDate` ぐらいでしょう。
  それぞれ、デバッグフラグ、ビルド番号(単なるepoch)、ビルド日時です。


### makeターゲット一覧

makeの依存関係はドットファイルのフラグファイルで管理しています。
これは主に、mavenのローカルリポジトリに入るファイルを判定する為です。

実際の依存関係のグラフは、clan同梱の
[doc/dependencies.png](https://github.com/ayamada/clan/blob/master/doc/dependencies.png) および
[doc/dependencies.dot](https://github.com/ayamada/clan/blob/master/doc/dependencies.dot) を参照してみてください。

- make info
    - clan/info/ にある、clan自体の情報を保持するパッケージを構築し、
      mavenのローカルリポジトリに登録します。
      これはビルド情報を含める為、結構頻繁に更新されます。

- make dep-libgdx
    - libgdxを公式サイトからダウンロードし、
      mavenのローカルリポジトリに登録します。

- make dep-neko
    - nekoをclojars.orgからダウンロードし、一部をコンパイルし、
      mavenのローカルリポジトリに登録します。

- make dep
    - dep-libgdx と dep-neko の両方を実行します。

- make layout
    - layout/ 配下にあるソースファイルを適切な位置に配置します。
      これはandroidにて、パッケージ名によってメインアクティビティの
      定義位置が変わってしまう対策です。
        - もっといい方法はありそうだけど調査は後回し

- make cal
    - cal/ 配下にある、clojureで書いたアプリ本体を構築し、
      mavenのローカルリポジトリに登録します。
        - calとは「clojure ApplicationListener」の略です。
          そして「ApplicationListener」は、libgdxのApplicationListenerです。

- make cbl
    - clan/cbl 配下にある、ブートローダ本体を構築し、
      mavenのローカルリポジトリに登録します。
        - cblとは「clojure BootLoader」の略です。

- make jar
    - desktop/ 配下に、デスクトップ向けの`*.jar`を生成します。

- make jar-exec
    - 上記jarを生成し、実行します。

- make apk
    - android/ 配下に、デバッグ署名のandroid向けの`*.apk`を生成します。

- make apk-install
    - 上記apkを生成し、接続している端末にインストールします。

- make release-jar
    - target/ 配下に、リリース版のjarをクリーンに生成します。

- make release-exe
    - target/ 配下に、リリース版のexeをクリーンに生成します。

- make release-apk
    - target/ 配下に、リリース版の正式な署名のapkをクリーンに生成します。

- make release
    - target/ 配下に、上記3ファイルを全て生成します。

- make clean
    - 全てのクラスファイル、実行ファイルを削除します。

- make ac-clean
    - `autoconf && ./configure` が生成するファイルを削除します。

- make release-clean
    - リリース用ファイルを削除します。

- make distclean
    - `make clean ac-clean release-clean` と同じです。

- make maintainer-clean
    - distcleanに加え、ダウンロードしたlibgdx配布物も削除します。

- make depclean info-clean layout-clean cal-clean cbl-clean jar-clean apk-clean
    - それぞれのターゲットのみ削除します。


### CLAN自身の開発手順

自分用。

CLANはサンプルアプリとセットで開発を行う。

~~~{.bash .numberLines}
mkdir -p clan_parent
cd clan_parent
git clone git@github.com:ayamada/clan.git
sh clan/script/spread_current_dir.sh
~~~

- サンプルアプリのリリースは手動で行う為、ディレクトリは一段でよい
- push可能なように、sshでgit cloneする
- サンプルを展開する

この状態で開発を行う。

まず最初に al.clj をいじって、
外部ファイルの動的ロード(後述)とプロファイリングができるようにしておく事。

サンプルアプリは今のところ、非リリース版では以下の機能が有効になる。
(将来には変更になる可能性大)

- 起動時に、外部ファイル/URLからclojureファイルを読み込む。
  この機能は、アプリの再ビルドなしに jp.ne.tir.drop.drop モジュールを
  更新するのに使える(上記ファイルとしてcal内のdrop.cljをそのまま指定する)
    - android端末でこの機能を使って外部URLからファイル読み込む場合、
      android/AndroidManifest.xmlにINTERNETが必要。
      またファイルのロード(というかdexコンパイル)にはかなりの時間がかかる。

- 起動後はEキーを押すと、上記とは別の外部ファイル/URLのファイル内容をevalする
  この機能はREPLの粗悪品として使える。
    - 本当はnREPLを使いたいが、デバッグ版とリリース版の切り分けがうまくいかず
      とりあえず簡易版としてこれを実装。
    - たまにandroid内でスレッドプールからスレッドが確保できなくなる時がある。
      原因不明。あとで調べなくてはならない。

一通り開発ができたら以下を行う。

- 上記で変更した al.clj を元の状態に戻しておく
- もし必要であれば、サンプルアプリのリリース版の生成を行う。
    - ここの手順は上記の「[#リリース作業]()」を確認する事。
        - ただし、上記「リリース作業」内では、この中でplayや配布物の公開を
          行っているが、CLANサンプルアプリの場合は、リリースファイルの生成
          のところまでで一旦止めておく事(CLAN本体のリリース後に公開する)。
    - なお、このリリース作業内にて、drop.clj内のlicenseのurlのタグ部分の更新も
      通常は必要(サンプルアプリのみのバージョンアップであれば不要)。
      忘れないようにする事。

その後、以下を実行してsampleに反映し直す。

~~~{.bash .numberLines}
make maintainer-clean
cp -a Makefile.in android assets cal configure.ac desktop l4j layout res clan/sample
~~~

要は、 clan/ 以外の全ファイルを clan/sample/ へと戻している。

その後、忘れずにgitに保存する。 この際には必ず、
**変更ファイル一覧および差分を確認** し、うっかりして
**前述のpath部分の変更がコミットされたりする事がないよう注意** する。

- サンプルアプリ部分をコミットしたくなったら、前述の cp -a
  を行ってからコミットする事。


### CLAN自身のリリース手順

上記の通りに開発を行い、gitに保存したところまで進めておく事。

0. ChangeLog にリリースの記録
    - gitのコミットログを確認し、重要な変更点があるならきちんと記入する事
1. script/settings.sh のバージョン番号から、 `-SNAPSHOT` を除去
2. git add ChangeLog script/settings.sh
3. git commit -m 'version X.Y.Z releasing'
4. git tag -a タグ名 -m 'メッセージ'
5. script/settings.sh のバージョン番号を上げ、 `-SNAPSHOT` を付与
6. git add script/settings.sh
7. git commit -m 'version X.Y.Z released'
8. git push
9. git push origin --tags

時間があればリリースブランチを使う等、もう少し今風に改善したいところだが…

上記が完了したら、[http://doc.tir.ne.jp/devel/clan]()、つまりこのページ自体も更新を行い、「公開サイトに反映」ボタンを押す事。

- 具体的には以下を変更する
    - 上の方の「現在のバージョン」
    - Usage内のチェックアウトするタグ指定
    - もしバージョンアップに伴い仕様が変化したなら、該当箇所を忘れずに更新

最後に、必要に応じて、サンプルアプリの配布物を公開する。google playにも登録する。
-->



続きはあとで書く

<!--

FAQ
---

How to use external library from clojars and etc
:   Now, add dependency to `cal/pom.xml.in`.

外部ライブラリ追加したい
:   今のところは、 `cal/pom.xml.in` にdependencyを追加してください。
    他のdependencyのエントリをコピペする際には、
    scopeがprovidedになってない事を確認する事。
    providedになってたらバイナリに含まれない。compileにしとく。

apk生成時に "java.security.SignatureException: private key algorithm is not compatible with signature algorithm" というエラーが出る
:   あなたの生成した鍵の `-genkey` 指定がおかしいようです。
    [http://developer.android.com/intl/ja/tools/publishing/app-signing.html#cert]() を見ながら、正しく `-genkey` を指定して鍵を生成し直しましょう。

Cannot create dex file
:   bump up to value of `<jvmArgument>` in `android/pom.xml.in`.
dexファイルの生成に失敗するようになった
:   `android/pom.xml.in`内の`<jvmArgument>`の値を増やしてください。

dexファイルの生成がいつまでたっても終わらない。cpuも使っていない
:   おそらくdex内にcom.google.androidのjarを内包しようとしています。 dependencies 指定を見直してみてください。

My app is too slow on android-real-machine.
:   enabling
    [`*warn-on-reflection*`](http://clojure.org/java_interop#Java%20Interop-Type%20Hints),
    and insert type specifier. it was used by
    [clojure-maven-plugin](https://github.com/talios/clojure-maven-plugin#configuring-your-clojure-session).

android実機で超遅い
:   [`*warn-on-reflection*`](http://clojure.org/java_interop#Java%20Interop-Type%20Hints)
    を有効にして、型指定しまくって警告を全部つぶす。
    [clojure-maven-plugin](https://github.com/talios/clojure-maven-plugin#configuring-your-clojure-session)からも指定可能。

Why cannot I compile `*.clj`, it was skipped.
:   set to encoding = utf-8, or add string like `-Dfile.encoding=utf-8`
    to env-variable of `MAVEN_OPTS`. This is spec of clojure-maven-plugin
    probably.

なぜか `*.clj` がスキップされてコンパイルされない
:   文字コードをutf-8にしてみる。 もしくは、環境変数`MAVEN_OPTS`に
    `-Dfile.encoding=utf-8` 的な指定を追加してみる。
    clojure-maven-pluginの仕様のようです。

How to upgrade CLAN
:   replace `clan/` directory, or `git pull` on `clan/` directory. but,
    you must check to ChangeLog for incompatible changes at before.

CLANバージョンアップのやりかた
:   `clan/` ディレクトリを丸ごと新しいものに交換する。 もしくは `clan/`
    ディレクトリ内で `git pull` を実行。
    だが先にChangeLogを見て、非互換な変更がないか確認する事。

Where is save data of Preferences
:   - on Android, there is in SharedPreferences. it delete by uninstall app.
    - on Windows, there is in `C:\Users\{USERNAME}\.prefs\{PREFNAME}\`.
      WARNING: `.prefs` is shared by other libgdx apps.
      PREFNAME must have unique name!
    - on othre desktop OS, there is in `~/.prefs/{PREFNAME}/`.
      WARNING: `.prefs` is shared by other libgdx apps.
      PREFNAME must have unique name!

Preferences の実データの保存先
:   - androidでは、SharedPreferences内。アプリアンインストールで削除される。
    - windowsでは、 `C:\Users\{USERNAME}\.prefs\{PREFNAME}\` 内。
      androidとは違い、他のlibgdx利用アプリと共通なので、
      PREFNAMEはきちんとuniqueな名前にする必要がある！
    - windows以外のdesktopでは、 `~/.prefs/{PREFNAME}/` 内。
      PREFNAMEについてはwindowsと同じ注意が必要！

I want to change/erase background console output.
:   You edit `clan/cbl/src/main/java/jp/ne/tir/clan/BootLoader.java`

背景のコンソール出力を変更したい/表示させたくない
:   `clan/cbl/src/main/java/jp/ne/tir/clan/BootLoader.java` をいじる

I want to change color in boot screen.
:   You edit `clan/cbl/src/main/java/jp/ne/tir/clan/BootLoader.java`

ブート画面の色を変更したい
:   `clan/cbl/src/main/java/jp/ne/tir/clan/BootLoader.java` をいじる

I want to change boot screen more better.
:   You edit `clan/cbl/src/main/java/jp/ne/tir/clan/BootLoader.java`

その他ブート画面をもっとよくしたい
:   `clan/cbl/src/main/java/jp/ne/tir/clan/BootLoader.java` をいじる

I dont want boot screen.
:   You check to comment-outed area in `clan/layout/*.in`.

ブート画面を出したくない
:   `clan/layout/*.in` 内のコメントアウトされている部分を見てください。

二回目起動時に起動画面が表示されない
:   android実機では一度起動したプログラムはしばらくキャッシュされる為、二回目以降の起動は高速に行えます。起動画面は起動に時間がかかるのをごまかす為のものなので、高速起動できるなら起動画面を出す必要はないので、バージョン0.0.4からは出さないようにしました。

二回目起動時に、トップレベルのdefで定義した、以前に起動したプロセスの変数の内容が、android本体を再起動するまで残っている。
:   [clan/libgdx#androidのdexキャッシュ問題]()を見てください。

生成したjarにソースファイルを含めたくない
:   [clan/memo#配布物のjarにcalのソースファイルを含めないようにするには]()を見てください。

calのpomにライブラリを追加したら、PCでは動くのにdx.jarのコンパイル時に「`already added`」と言われて通らない
:   追加したライブラリのscopeを`provided`にしてください。

How to make windows exe for debug
:   do `make jar inner-release-exe`. but it is dangerous and be discouraged.

デバッグ版exeを作りたい
:   `make jar inner-release-exe` で作れます。しかし危険なのでおすすめしない。

What is something wrong to collision-detection of sample-app?
:   it can catch items by mouth only.

サンプルアプリの当たり判定おかしくない？
:   口の部分にのみ当たり判定があります。

I cannot press 'E' key on real-android-machine.
:   you can edit code that add button on screen, or use bluetooth keyboard.

android実機でEキーなんて押せねーよ！
:   自分でコードをいじって画面にボタンでも追加する。
    もしくはbluetoothキーボードを用意。

How do license?
:   see [clan/license]()(sorry, use translator).

ライセンスどうすればいい？
:   [clan/license]() を見てください。

nekoの使い方がわからない
:   androidではActivity内に子Activityを持つ構造が普通で、
    libgdxはその子Activity内にゲームを作る機能はあるけれど、
    Activity構造自体をどうこうする機能は提供していない。
    nekoはその機能があるので、そういう構造にしたい場合はnekoを使う。
    がayamadaがまだそういう機能を必要とするアプリを作ってないので
    取り込むだけ取り込んで放置されている。
    そういうアプリを作り始めたらドキュメントを書く。
    それまでは英語のnekoのドキュメントを読んで調べてほしい。

What is CLAN logo?
:   This is my family emblem. Change more better logo on later. (because
    it is too cutting corners.) logo's emblem part came from eps-file
    that distributed by [http://eps.crest-japan.net/index_en.php]().

CLANのロゴは何？
:   うちの家の家紋です。
    あとでもっとちゃんとしたロゴを作る(あまりにも手抜きなので)。
    家紋部分は [http://eps.crest-japan.net/]()
    からepsファイルを貰ってきて加工して作った。

What is assets of sample game?
:   all assets were made by me.

サンプルゲームの画像や音は何？
:   自作した。全部俺。

Etc...
:   see [clan/memo]().


-->


TODO
====

- isolate `desktop/` for `make run`
    - if target application make temporary files, that get `desktop/` messy.

- simplify spaghetti build process (but it is difficult)
    - remove autoconf (if possible)
    - remove Makefile (if possible)

- enable proguard.cfg ( remove `-dontshrink` and tune-up )
    - [http://stackoverflow.com/questions/12281365/obfuscating-clojure-uberjars-with-proguard]()

- automatically change `uses-permission` (and others) in `android/AndroidManifest.xml`
    - I want to enable/disable `INTERNET`, `WRITE_EXTERNAL_STORAGE` when release/debug

- collecting and documentation to know-how in clojure(for android), libgdx, android, neko

- 増やし忘れ対策 of `PROJECT_ANDROID_VERSIONCODE` in configure.in

- maintain documents
- translate from japanese comment to english in source
- report to libgdx community
- change CLAN logo to more better


Help me
=======

- I(ayamada, developer of CLAN) have only short time for develop to CLAN.
    - Please give me [pull-req](https://github.com/ayamada/clan/pulls).
        - Especially, Java developer for BootLoader.java (but comments are written in japanese in source now, sorry...)
- I have no money.
    - Please give me a work for money.
        - See [my resume](/tir.ne.jp/members/yamada/resume#english-version).
    - Please donate me a money for develop to CLAN.
        - <form action="https://www.paypal.com/cgi-bin/webscr" method="post"><input type="hidden" name="cmd" value="_donations" /><input type="hidden" name="business" value="T47SCVZKCCHWL" /><input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!" /><input type="hidden" name="lc" value="en_US" /></form>
- Contact for me (provisional): [`@rnkv`](https://twitter.com/rnkv)

----

- 山田(CLAN開発者)はあまりCLAN自体の開発に時間を費せません。
    - よかったら [pull-req](https://github.com/ayamada/clan/pulls) おねがいします。
        - 特にJavaの得意な人。BootLoader.javaまわりは非常に改善の余地があります
- 山田は資金がありません。
    - よかったら金になるお仕事ください。
        - 詳細については[山田のresume](/tir.ne.jp/members/yamada/resume)を見てください。
    - よかったらCLAN開発資金を寄付してください。
        - …と言いたいところですが、日本ではPayPal経由での寄付ができないので、代わりに、下のページからamazonで買い物をしていただけると非常に助かります。
            - [http://vnctst.tir.jp/ja/misc/amazon.html]()
- libgdxは日本語ドキュメントが猛烈に不足しているので、あなたも自分のサイトでlibgdxの日本語記事を書いてみませんか？
    - 山田が書いた雑多な記事は、[clan/libgdx]()にあります。
- 山田はやる気がありません。
    - 「やる気」はこの世で最も貴重なものの内の一つであり、その源となるようなものがあったら是非ください(例えば、面白いurl等)
- 山田に連絡する場合はとりあえず [`@rnkv`](https://twitter.com/rnkv) あたりにください。


Link
====

- See [https://github.com/ayamada/clan#link]().


License
=======

CLAN have [Apache License 2.0](http://www.apache.org/licenses/LICENSE-2.0).

Which can be found in the file [LICENSE](https://github.com/ayamada/clan/blob/master/LICENSE).

(なお、CLANのライセンスは上記の通りですが、CLAN生成物のライセンスがどうなるかについては、 [clan/license]() にメモがあります。日本語のみ。)



<!-- vim:set ft=pandoc ts=4 sts=4 sw=4 et: -->
