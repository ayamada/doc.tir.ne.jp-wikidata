---
toc: yes
title: CLAN : Clojure, LibGDX, Android, Neko application construct kit
...


Sorry, I am rewriting this document now. Old document (for version 0.0.6) is here. -> [clan/0.0.6]()

現在ドキュメントの書き直し中です。古いバージョン(0.0.6ベース)のドキュメントはこちらにあります→[clan/0.0.6]()

----

<div style="text-align:center"><img src="/devel/clan/logo_b.png" /></div>

**CLAN : Clojure, LibGDX, Android, Neko application construct kit**

**CLAN : Clojure, LibGDX, Android, Neko アプリケーション構築キット**


Abstract
========

- CLAN is ...
    - If you write [LibGDX](http://libgdx.badlogicgames.com/)'s [ApplicationListener](http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/ApplicationListener.html) by **Clojure**, then CLAN can run this.
      And, CLAN can deploy to jar(for many desktop OS with Java), exe(for Windows with Java), apk(for Android).
        - Therefore, you shall be able to understand LibGDX and Clojure, if you want to use CLAN.
    - CLAN can use nREPL.
        - but it is very inconvenience, because it have some problems that [http://badlogicgames.com/forum/viewtopic.php?t=9400&p=42716]().
    - CLAN have splash screen on loading Clojure at boot.
        - Can replace logo image.
    - CLAN is completely CLI (unnecessary GUI).
    - CLAN work on UNIX like OS, Mac, and Windows!

----

**概要**

- CLANとは
    - [LibGDX](http://libgdx.badlogicgames.com/)の[ApplicationListener](http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/ApplicationListener.html)を「Clojureで」書いたものを、実行させたり、jarやexeやapkにデプロイしたりする事のできる開発キットです。
        - よって、CLANを使いたい人はLibGDXとClojureを理解している必要があります。
    - nREPLが使える
        - ただしかなり不便、問題点は [http://badlogicgames.com/forum/viewtopic.php?t=9400&p=42716]() に書いてある
    - プロセス起動時のClojureロード時に起動ロゴ等の画像を表示する機能あり
        - ロゴ画像は入替可能
    - 完全にcliベースでのビルドやデプロイが可能(gui環境不要)
    - unix風環境、mac、windows環境でも動く！


Repository
==========

- [https://github.com/ayamada/clan]()


Child pages
===========
(sorry, these pages are written in japanese)

- [clan/introduction](): 別に読まなくてもよい前書き
- [clan/libgdx](): libgdxメモ
- [clan/license](): 沢山のソフトが結合した結果、大変な事になったライセンス解説
- [clan/assets](): アセット回りの話
- [clan/memo](): 雑多なメモ。とりあえず何でもここに書く。あとで分類する予定。


Requirement
===========

- Commonly-used CLI environment
    - sh, GNU make(gmake), GNU autotools(autoconf), wget, unzip
        - If you use Windows, these are in [MinGW/MSYS](http://www.mingw.org/).
            - But, you will be update wget's cert, maybe.
- [JDK 1.6](http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-javase6-419409.html) or [OpenJDK 1.6](http://openjdk.java.net/)
    - If you build Android's apk, you must use 1.6, NOT 1.7 (Android SDK requires 1.6)
    - If you don't build Android's apk, you can use 1.7
- [JRE 1.6 or later (recommend 1.7)](http://java.com/en/download/) or [OpenJDK Runtime Environment](http://openjdk.java.net/)
- [Leiningen](https://github.com/technomancy/leiningen/)
- (optional) [Android SDK](http://developer.android.com/sdk/) (for Android's apk)
- (optional) [Launch4j](http://launch4j.sourceforge.net/) (for Windows' exe)

I look see that CLAN worked on Microsoft Windows Vista(x86-32bit), and Gentoo Linux(x86-32bit) on 2013/02/28.

----

**必要なもの**

- 一般的なCLI環境
    - sh, GNU make(gmake), GNU autotools(autoconf), wget, unzip
        - windows環境の場合は、[MinGW/MSYS](http://www.mingw.org/)に全て入ってます
            - ただし、おそらく[wgetのcertを更新しておく](http://d.hatena.ne.jp/bellbind/20110612/1307848645)必要があります
- [JDK 1.6](http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-javase6-419409.html) か [OpenJDK 1.6](http://openjdk.java.net/)
    - もしandroid用apkをビルドしたい場合、バージョンは1.6でないといけません(android sdkが1.6でないと動かない為)。
    - android用apkが不要な場合は1.7でokです
- [JRE 1.6 もしくはそれ以降 (1.7推奨)](http://java.com/en/download/) もしくは [OpenJDK Runtime Environment](http://openjdk.java.net/)
- [Leiningen](https://github.com/technomancy/leiningen/)
- (optional) [Android SDK](http://developer.android.com/sdk/) (android用apkを生成したい場合のみ)
- (optional) [Launch4j](http://launch4j.sourceforge.net/) (windows用exeを生成したい場合のみ)

2013/02/28 に、windows vista(32bit)とgentoo(x86-32bit)上にてサンプルプロジェクトのビルドが動作する事を確認しています。

windows環境での各種のインストールについては、 [env]() が参考になるかもしれません。


Usage
=====

**使い方**

## Prepare to develop and run sample application for test

**開発準備とサンプルアプリ実行テスト**

### Spreading project directory

~~~{.bash .numberLines}
mkdir -p package/projname
cd package/projname
git clone https://github.com/ayamada/clan.git
(cd clan && git checkout 0.1.0)
sh clan/script/spread_current_dir.sh
~~~

- You decide `package` and `projname` as you likes
- You decide target of checkout from [git tag](https://github.com/ayamada/clan/tags)
- Run `clan/script/spread_current_dir.sh`, then spread many files to `package/projname/`
- There is assumed below directory strucuture.
    - **`package/projname/clan/` :** CLAN main unit, you don't need to edit in this directory.
    - **`package/projname/` :** there is in your application project files.
        - Check to [#directory-structure]() for details.
    - **`package/` :** You can set Makefile(or other script) for distributing built files(jar/exe/apk) by youself. (optional)
        - For example: zipping exe and README.txt, push apk to google play, etc...
    - **`package/.git`** or **`package/projname/.git` :** save your project to git (or other revision-control-system) local repository. (optional)
        - `clan/script/spread_current_dir.sh` makes `package/projname/.gitignore`, that exclude to `package/projname/clan/` .

----

**プロジェクトディレクトリの展開**

~~~{.bash .numberLines}
mkdir -p package/projname
cd package/projname
git clone https://github.com/ayamada/clan.git
(cd clan && git checkout 0.1.0)
sh clan/script/spread_current_dir.sh
~~~

- `package` と `projname` を好きに決めます。
- [git tag](https://github.com/ayamada/clan/tags) を見て、どのバージョンをcheckoutするか決めます。
- `clan/script/spread_current_dir.sh` を実行します。すると `package/projname/` の中に大量のファイルが展開されます。
- これらは以下のようなディレクトリ構成を想定しています。
    - **`package/projname/clan/` :** CLAN本体、あなたがこの中をいじる必要は通常はありません
    - **`package/projname/` :** あなたのアプリのプロジェクトのファイルはこの中に置きます。
        - [#directory-structure]() に詳細があります。
    - **`package/` :** ここに、リリース向けとして生成した jar, exe, apk を配布向けにパッケージングする為の Makefile(もしくは他のスクリプト等)を自由に置く事ができます(optional)
        - 例: exeファイルとREADME.txtをセットでzipに固める。apkファイルをgoogle playにpushする。等々…
    - **`package/.git`** もしくは **`package/projname/.git` :** あなたのプロジェクトをgit(もしくは他のリビジョン管理システム)に保存する為の何かも設置できます(optional)
        - `clan/script/spread_current_dir.sh` スクリプトは `package/projname/.gitignore` も生成します。これには `package/projname/clan/` を除外する設定が入っています。


### Build and run sample application on desktop

~~~{.bash .numberLines}
autoconf && ./configure
make run
~~~

This sample application is named "drop" or "space drop".

(This game rule is based on [http://code.google.com/p/libgdx/wiki/SimpleApp](), I rewrite by Clojure and add more gimmics. )

CLAN's `BootLoader.java` control as long as display boot-logo.

- This is for loading clojure on background.
- You can change boot-logo image file and boot-jingle sound file at later.

If "drop" works done, then finish application process, and go next.

(I explain to description of `autoconf && ./configure`, and targets of `make`, but it is at later.)

This is run application with nREPL.

~~~{.bash .numberLines}
make repl
~~~

But, it take very long time at boot, and that cannot rerun in nREPL.
I guess, will use `make run` for almost develop.
And, will use `make repl` for chase to very difficult bugs.

- See [http://badlogicgames.com/forum/viewtopic.php?t=9400&p=42716]().

The sample application's source code is in `src/drop/main.clj`.

Read this, and input to nREPL console as you likes.

(For example, change and input to `(def speed-level 100)`, `(def item-spawn-interval 100000000000)`, etc...)

If you see to work nREPL, then finish application process, and go next.

----

**サンプルアプリをデスクトップ上で実行してみる**

~~~{.bash .numberLines}
autoconf && ./configure
make run
~~~

このサンプルアプリは「drop」「space drop」という名前です。

(このゲームは [http://code.google.com/p/libgdx/wiki/SimpleApp]() をベースにClojureで書き直し、色々な要素を追加しています)

アプリが起動すると、起動ロゴが表示されている間はCLANの `BootLoader.java` が制御を握ります。

- ロゴの出ている間、バックグラウンドではclojureのローゴが行われています
- 起動ロゴや起動音の差し替えができます。

サンプルアプリがちゃんと動いているようなら、アプリを終了して次に進んで下さい。

( `autoconf && ./configure` の詳細や make のターゲットについてはまた後で解説します。)

nREPL経由でサンプルアプリを実行する事もできます。

~~~{.bash .numberLines}
make repl
~~~

しかし、nREPL経由だと起動までに非常に時間がかかり、しかもnREPL中には一回しかアプリ起動ができません。
なので、通常の開発時は主に`make run`を使って開発を行い、`make repl`を使うのは難しいバグを追跡している時だけにするのが良いと思います。

- [http://badlogicgames.com/forum/viewtopic.php?t=9400&p=42716]() に、この件が少し書かれています。

サンプルアプリのソースは `src/drop/main.clj` にあります。

これを見て、nREPLのコンソールを色々と試してみてください。

(例えば、ソースから「`(def speed-level 100)`」「`(def item-spawn-interval 100000000000)`」のようなところを拾ってきて、数値を変更して入力してみるとか)

nREPLが一応動いているのを見たら、アプリを終了して次に進んでください。

### Build and run sample application on android

(optional)

If you install Android SDK, you can run sample application on android.

(You shall connect Android-debug-usb, or run Android emulator)

~~~{.bash .numberLines}
make android-run
~~~
To build for Android need very large memory(over 1G) and minutes(over 5min?).

----

**サンプルアプリをandroidで実行してみる**

(オプショナル)

android sdkをインストールしているなら、サンプルアプリをandroid上で動かす事ができます。

(ただし先に、androidデバッグusb接続をしておくか、エミュレータを起動しておいてください)

~~~{.bash .numberLines}
make android-run
~~~

android向けのビルドは(デスクトップ向けと比べて)非常に多くのメモリ(1G以上)と時間(5分ぐらい？)が必要になります。

### Clean up sample application

~~~{.bash .numberLines}
make distclean
~~~

Delete almost temporary files and clean up to sample application.

----

**サンプルアプリのクリア**

~~~{.bash .numberLines}
make distclean
~~~

ほとんどの一時ファイルを消し、サンプルアプリをクリアします。

## Develop your application


TODO: つづきはあとで！

<!--



### 開発の開始

上記ディレクトリをベースに、以下のフローで開発を行います。

1. configure.ac を適切に書き換える

2. 必要に応じて、`layout/*.in` `android/AndroidManifest.xml.in` 等を編集

    - `*.in` というのは、autoconfによる書き換えを行う元ファイル。
        とりあえず、以下だけ把握していればok。

        - 後述の `autoconf && ./configure`
          実行時に書き換えも実行される
        - 例えば `hoge.xml.in` から `hoge.xml`
          が、同じディレクトリに生成される
        - ファイル内の `@HOGE@` のような部分のみが書き換えられる
        - 後述の `make clean`
          系を実行すると、生成されたファイルも消える

    - この辺りのファイルの実際の役目についてはlibgdxおよびandroidの
      ドキュメントをぐぐってください。

3. cal/src/main/clojure/{package}/.../al.clj 等を作成/編集

    - これがアプリの本体です。

4. 利用するアイコン、リソース等を assets/ res/ l4j/ 等に追加/変更

5. `autoconf && ./configure` する

    - これにより、環境のチェックと `*.in` ファイルからの
      書き換え(ファイル生成)が実行される。
    - 知っている人は ./configure にパラメータや引数を渡したくなるかも
      しれませんが、ここでは一般的な autoconf の利用法から外れた
      使い方をしている為、何も渡さないようお願いします。
    - layout内のファイル等、一部のソースも `*.in`
      ファイルになっている為、
      面倒くさがらず、こまめにautoconfを実行する事を推奨します。

6. `make jar-exec` する

    - ソースにエラー等がなければ、 `*.jar`
      ファイルが生成され、実行されます。
    - エラーが出た場合は 2. か 3. に戻って修正してください。
    - その他のmakeで指定できるターゲットは後述。

7. 動作したが気に食わない/更にコードを追加する

    - `make clean` してから 3. に戻ってください。

8. `make apk-install` して実機で動作確認

    - このコマンドでデバッグ版のandroid用 `*.apk` が生成され、
      接続されている端末にインストールされます。
      端末のアプリ一覧から入ったアプリを選択して動かしてみてください。
    - この場合も修正し直す場合は `make clean` してから 3. に戻ってください。

これらのコンパイルは結構時間がかかる為、
デバッグ中は、直に`*.clj`ファイルを読み込むようにするといいでしょう。
これならアプリを再起動するだけですぐに反映されます。

(サンプルアプリにもこの機能を入れてあります。
`load-*`系関数を使って外部にある、 `(ns jp.ne.tir.drop.drop ...)`
ではじまるスクリプトを読み込む事で、既にコンパイルされている
jp.ne.tir.drop.drop モジュールの各関数をメモリ上でのみ上書き
したような状態にする事ができます。)

- ただしPCではすぐにロードされますが、
  android実機でのスクリプトのロードはPCとは違い、
  非常に時間がかかります。注意！ (サンプルアプリ程度の量で1分ぐらい)
    - また、androidで動的に変更した内容は、
      次回のアプリ起動時にも引き継がれてしまうようです。
      REPLを利用したデバッグ時には注意が必要です。
        - この件については、[clan/libgdx#androidのdexキャッシュ問題]()も参照してください。

「これで完成だ」と思ったら、リリースを行います。


### リリース作業

デスクトップ向けos汎用の`*.jar`、windows向けの`*.exe`、
android向けの署名付き`*.apk`を生成します。

1. リリースするので、 configure.ac を編集し、
   バージョン番号等をリリース向けに変更します。
   (具体的には「-SNAPSHOT」を取る、とかそういう作業)
    - バージョンアップの場合は、忘れずに `PROJECT_ANDROID_VERSIONCODE`
      の値を上げます。

2. AndroidManifest.xml.in も編集します。
    - デバッグの為だけに `INTERNET` や `WRITE_EXTERNAL_STORAGE`
      を有効にしていた場合は、必要に応じてコメントアウトしておきます。
      (これは将来には何らかの手段で、手でいじらなくてすむようにする予定…)

3. ソースをgit等に保存している場合は、
   この段階でリリースタグやリリースブランチも作っておきます。

4. まだapk署名用の鍵を作ってなければ、作成します。

    - [http://developer.android.com/intl/ja/tools/publishing/app-signing.html#cert]() を見ながら、正しく生成し直しましょう。 `-keyalg` の指定を忘れないようにする事(androidでは `SHA1withRSA` であるべきらしい)。

    - コンソールから以下のコマンドを実行します。
      質問されるので適切に入力し、パスワード等も決めてください。

        ~~~{.bash .numberLines}
        keytool -genkey -v -keystore path/to/NAME.keystore -alias NAME -keyalg RSA -keysize 2048 -validity 36500
        ~~~

    - ファイル名およびalias名は自分で決めてください。
      この辺りの詳細についてはぐぐってください。
    - このファイルをなくすとgoogle playでのバージョンアップが
      できなくなるので、バックアップを取っておいた方がいいでしょう。

5. 上の署名用鍵の情報を、ローカルのmavenのsettings.xmlに設定する

    - 以下の内容のsettings.xmlを、 `~/.m2/settings.xml` に設置します。
      既に設置されている場合はいい感じに混ぜてください。
      この辺りの詳細も必要であればぐぐってください。

        ~~~{.xml .numberLines}
        <settings>
          <profiles>
            <profile>
              <id>clan-sign</id>
              <properties>
                <sign.keystore>d:/path/to/hoge.keystore</sign.keystore>
                <sign.alias>hoge</sign.alias>
                <sign.storepass>xxxxxxxx</sign.storepass>
                <sign.keypass>xxxxxxxx</sign.keypass>
              </properties>
            </profile>
          </profiles>
          <activeProfiles>
            <activeProfile>clan-sign</activeProfile>
          </activeProfiles>
        </settings>
        ~~~

    - 上記の `sign.keystore sign.alias sign.storepass sign.keypass` を
        自分の生成した鍵にあうように変更しておいてください。

        - msysではドライブ指定に注意が必要です。
          上記のような感じなら大丈夫でしょう。

6. 例によって `autoconf && ./configure` した後、 `make release`
   を実行します。 エラーにならずに最後まで完了すれば、 `target/`
   の中に以下の3ファイルが生成されます。

    - `appname-android.apk  appname-desktop.exe  appname-desktop.jar`

7. これらの3ファイルそれぞれに対して、最終動作確認を行います。

    - この段階で問題が見付かる事が結構多い…もう少し検証工程が必要だ！

8. 必要に応じて、これらのファイルを配布物としてパッケージングしたり、
   google playに登録したりします。

9. リリースしたので、 configure.ac と AndroidManifest.xml.in を編集し、
   バージョン番号等を非リリース向けに戻したり等の作業を行います。

以上。


-->

<!--


Directory structure
===================

- `package/projname/clan/` : CLAN main unit, you don't need to edit in this directory.
- `package/projname/.gitignore` : ...
    - この .gitignore も `spread_current_dir.sh`
      によって生成されます。
- 

-->


<!--
その他
======

### 用語について

- clan : この構築キット、配布物一式、ディレクトリ名
- cal : CLAN ApplicationListener。アプリ本体、これを主にいじる。 cal/ が実体
- cbl : CLAN BootLoader。ブート画面部分。clan/cbl/ 内にソースあり


### ディレクトリ解説

いじるべきソースが入っているもの

- cal/
    - アプリ本体のソース置き場。この中にApplicationListenerを書く
    - 外部ライブラリを利用したい時は、この中のpom.xml.inに追加する。
      その際にはscopeをcompileにする事。providedだとjarに含まれない。

- layout/
    - androidアプリとデスクトップ向けjarの起動部分のコード置き場。
      コンパイル時にはこれらは android/ と desktop/
      の中にコピーされる。

リソース、設定類

- assets/
    - apk, jar, exe の全てのバイナリ内に埋め込まれるリソースファイル群置き場

- assets/cbl/
    - clanのブート画面用のリソース。差し替え可能

- assets/drop/
    - サンプルアプリで使用しているリソース。一から作る時は丸ごと捨ててよい

- assets/icon/
    - desktop版のプロセスアイコン。差し替え可能

- android/
    - この中でapkを生成します。
    - この中の AndroidManifest.xml.in はいじる必要あり

- res/
    - android向けリソース置き場。

- l4j/
    - launch4j用のリソース。exe向け設定とアイコン。

基本的にはいじる必要のないもの

- target/
    - make release時に自動生成されます。中にリリース版のapk, exe, jarができる

- clan/
    - clanの配布物一式

- desktop/
    - この中でjarを生成します。

- tmp/
    - mke dep時に自動生成されます。主にファイル展開に使う


### CLAN自体の情報を取得する

- clan/info/ によって、 jp.ne.tir.clan.Info が提供されます。
- 詳細については、 `clan/info/src/main/java/jp/ne/tir/clan/Info.java.in`
  を確認してください。しかし実際に使う可能性があるのは `Info/debug`,
  `Info/buildNumber`, `Info/BuildDate` ぐらいでしょう。
  それぞれ、デバッグフラグ、ビルド番号(単なるepoch)、ビルド日時です。


### makeターゲット一覧

makeの依存関係はドットファイルのフラグファイルで管理しています。
これは主に、mavenのローカルリポジトリに入るファイルを判定する為です。

実際の依存関係のグラフは、clan同梱の
[doc/dependencies.png](https://github.com/ayamada/clan/blob/master/doc/dependencies.png) および
[doc/dependencies.dot](https://github.com/ayamada/clan/blob/master/doc/dependencies.dot) を参照してみてください。

- make info
    - clan/info/ にある、clan自体の情報を保持するパッケージを構築し、
      mavenのローカルリポジトリに登録します。
      これはビルド情報を含める為、結構頻繁に更新されます。

- make dep-libgdx
    - libgdxを公式サイトからダウンロードし、
      mavenのローカルリポジトリに登録します。

- make dep-neko
    - nekoをclojars.orgからダウンロードし、一部をコンパイルし、
      mavenのローカルリポジトリに登録します。

- make dep
    - dep-libgdx と dep-neko の両方を実行します。

- make layout
    - layout/ 配下にあるソースファイルを適切な位置に配置します。
      これはandroidにて、パッケージ名によってメインアクティビティの
      定義位置が変わってしまう対策です。
        - もっといい方法はありそうだけど調査は後回し

- make cal
    - cal/ 配下にある、clojureで書いたアプリ本体を構築し、
      mavenのローカルリポジトリに登録します。
        - calとは「clojure ApplicationListener」の略です。
          そして「ApplicationListener」は、libgdxのApplicationListenerです。

- make cbl
    - clan/cbl 配下にある、ブートローダ本体を構築し、
      mavenのローカルリポジトリに登録します。
        - cblとは「clojure BootLoader」の略です。

- make jar
    - desktop/ 配下に、デスクトップ向けの`*.jar`を生成します。

- make jar-exec
    - 上記jarを生成し、実行します。

- make apk
    - android/ 配下に、デバッグ署名のandroid向けの`*.apk`を生成します。

- make apk-install
    - 上記apkを生成し、接続している端末にインストールします。

- make release-jar
    - target/ 配下に、リリース版のjarをクリーンに生成します。

- make release-exe
    - target/ 配下に、リリース版のexeをクリーンに生成します。

- make release-apk
    - target/ 配下に、リリース版の正式な署名のapkをクリーンに生成します。

- make release
    - target/ 配下に、上記3ファイルを全て生成します。

- make clean
    - 全てのクラスファイル、実行ファイルを削除します。

- make ac-clean
    - `autoconf && ./configure` が生成するファイルを削除します。

- make release-clean
    - リリース用ファイルを削除します。

- make distclean
    - `make clean ac-clean release-clean` と同じです。

- make maintainer-clean
    - distcleanに加え、ダウンロードしたlibgdx配布物も削除します。

- make depclean info-clean layout-clean cal-clean cbl-clean jar-clean apk-clean
    - それぞれのターゲットのみ削除します。


### CLAN自身の開発手順

自分用。

CLANはサンプルアプリとセットで開発を行う。

~~~{.bash .numberLines}
mkdir -p clan_parent
cd clan_parent
git clone git@github.com:ayamada/clan.git
sh clan/script/spread_current_dir.sh
~~~

- サンプルアプリのリリースは手動で行う為、ディレクトリは一段でよい
- push可能なように、sshでgit cloneする
- サンプルを展開する

この状態で開発を行う。

まず最初に al.clj をいじって、
外部ファイルの動的ロード(後述)とプロファイリングができるようにしておく事。

サンプルアプリは今のところ、非リリース版では以下の機能が有効になる。
(将来には変更になる可能性大)

- 起動時に、外部ファイル/URLからclojureファイルを読み込む。
  この機能は、アプリの再ビルドなしに jp.ne.tir.drop.drop モジュールを
  更新するのに使える(上記ファイルとしてcal内のdrop.cljをそのまま指定する)
    - android端末でこの機能を使って外部URLからファイル読み込む場合、
      AndroidManifest.xmlにINTERNETが必要。
      またファイルのロード(というかdexコンパイル)にはかなりの時間がかかる。

- 起動後はEキーを押すと、上記とは別の外部ファイル/URLのファイル内容をevalする
  この機能はREPLの粗悪品として使える。
    - 本当はnREPLを使いたいが、デバッグ版とリリース版の切り分けがうまくいかず
      とりあえず簡易版としてこれを実装。
    - たまにandroid内でスレッドプールからスレッドが確保できなくなる時がある。
      原因不明。あとで調べなくてはならない。

一通り開発ができたら以下を行う。

- 上記で変更した al.clj を元の状態に戻しておく
- もし必要であれば、サンプルアプリのリリース版の生成を行う。
    - ここの手順は上記の「[#リリース作業]()」を確認する事。
        - ただし、上記「リリース作業」内では、この中でplayや配布物の公開を
          行っているが、CLANサンプルアプリの場合は、リリースファイルの生成
          のところまでで一旦止めておく事(CLAN本体のリリース後に公開する)。
    - なお、このリリース作業内にて、drop.clj内のlicenseのurlのタグ部分の更新も
      通常は必要(サンプルアプリのみのバージョンアップであれば不要)。
      忘れないようにする事。

その後、以下を実行してsampleに反映し直す。

~~~{.bash .numberLines}
make maintainer-clean
cp -a Makefile.in android assets cal configure.ac desktop l4j layout res clan/sample
~~~

要は、 clan/ 以外の全ファイルを clan/sample/ へと戻している。

その後、忘れずにgitに保存する。 この際には必ず、
**変更ファイル一覧および差分を確認** し、うっかりして
**前述のpath部分の変更がコミットされたりする事がないよう注意** する。

- サンプルアプリ部分をコミットしたくなったら、前述の cp -a
  を行ってからコミットする事。


### CLAN自身のリリース手順

上記の通りに開発を行い、gitに保存したところまで進めておく事。

0. ChangeLog にリリースの記録
    - gitのコミットログを確認し、重要な変更点があるならきちんと記入する事
1. script/settings.sh のバージョン番号から、 `-SNAPSHOT` を除去
2. git add ChangeLog script/settings.sh
3. git commit -m 'version X.Y.Z releasing'
4. git tag -a タグ名 -m 'メッセージ'
5. script/settings.sh のバージョン番号を上げ、 `-SNAPSHOT` を付与
6. git add script/settings.sh
7. git commit -m 'version X.Y.Z released'
8. git push
9. git push origin --tags

時間があればリリースブランチを使う等、もう少し今風に改善したいところだが…

上記が完了したら、[http://doc.tir.ne.jp/devel/clan]()、つまりこのページ自体も更新を行い、「公開サイトに反映」ボタンを押す事。

- 具体的には以下を変更する
    - 上の方の「現在のバージョン」
    - Usage内のチェックアウトするタグ指定
    - もしバージョンアップに伴い仕様が変化したなら、該当箇所を忘れずに更新

最後に、必要に応じて、サンプルアプリの配布物を公開する。google playにも登録する。
-->



続きはあとで書く

<!--

FAQ
---

How to use external library from clojars and etc
:   Now, add dependency to `cal/pom.xml.in`.

外部ライブラリ追加したい
:   今のところは、 `cal/pom.xml.in` にdependencyを追加してください。
    他のdependencyのエントリをコピペする際には、
    scopeがprovidedになってない事を確認する事。
    providedになってたらバイナリに含まれない。compileにしとく。

apk生成時に "java.security.SignatureException: private key algorithm is not compatible with signature algorithm" というエラーが出る
:   あなたの生成した鍵の `-genkey` 指定がおかしいようです。
    [http://developer.android.com/intl/ja/tools/publishing/app-signing.html#cert]() を見ながら、正しく `-genkey` を指定して鍵を生成し直しましょう。

Cannot create dex file
:   bump up to value of `<jvmArgument>` in `android/pom.xml.in`.
dexファイルの生成に失敗するようになった
:   `android/pom.xml.in`内の`<jvmArgument>`の値を増やしてください。

dexファイルの生成がいつまでたっても終わらない。cpuも使っていない
:   おそらくdex内にcom.google.androidのjarを内包しようとしています。 dependencies 指定を見直してみてください。

My app is too slow on android-real-machine.
:   enabling
    [`*warn-on-reflection*`](http://clojure.org/java_interop#Java%20Interop-Type%20Hints),
    and insert type specifier. it was used by
    [clojure-maven-plugin](https://github.com/talios/clojure-maven-plugin#configuring-your-clojure-session).

android実機で超遅い
:   [`*warn-on-reflection*`](http://clojure.org/java_interop#Java%20Interop-Type%20Hints)
    を有効にして、型指定しまくって警告を全部つぶす。
    [clojure-maven-plugin](https://github.com/talios/clojure-maven-plugin#configuring-your-clojure-session)からも指定可能。

Why cannot I compile `*.clj`, it was skipped.
:   set to encoding = utf-8, or add string like `-Dfile.encoding=utf-8`
    to env-variable of `MAVEN_OPTS`. This is spec of clojure-maven-plugin
    probably.

なぜか `*.clj` がスキップされてコンパイルされない
:   文字コードをutf-8にしてみる。 もしくは、環境変数`MAVEN_OPTS`に
    `-Dfile.encoding=utf-8` 的な指定を追加してみる。
    clojure-maven-pluginの仕様のようです。

How to upgrade CLAN
:   replace `clan/` directory, or `git pull` on `clan/` directory. but,
    you must check to ChangeLog for incompatible changes at before.

CLANバージョンアップのやりかた
:   `clan/` ディレクトリを丸ごと新しいものに交換する。 もしくは `clan/`
    ディレクトリ内で `git pull` を実行。
    だが先にChangeLogを見て、非互換な変更がないか確認する事。

Where is save data of Preferences
:   - on Android, there is in SharedPreferences. it delete by uninstall app.
    - on Windows, there is in `C:\Users\{USERNAME}\.prefs\{PREFNAME}\`.
      WARNING: `.prefs` is shared by other libgdx apps.
      PREFNAME must have unique name!
    - on othre desktop OS, there is in `~/.prefs/{PREFNAME}/`.
      WARNING: `.prefs` is shared by other libgdx apps.
      PREFNAME must have unique name!

Preferences の実データの保存先
:   - androidでは、SharedPreferences内。アプリアンインストールで削除される。
    - windowsでは、 `C:\Users\{USERNAME}\.prefs\{PREFNAME}\` 内。
      androidとは違い、他のlibgdx利用アプリと共通なので、
      PREFNAMEはきちんとuniqueな名前にする必要がある！
    - windows以外のdesktopでは、 `~/.prefs/{PREFNAME}/` 内。
      PREFNAMEについてはwindowsと同じ注意が必要！

I want to change/erase background console output.
:   You edit `clan/cbl/src/main/java/jp/ne/tir/clan/BootLoader.java`

背景のコンソール出力を変更したい/表示させたくない
:   `clan/cbl/src/main/java/jp/ne/tir/clan/BootLoader.java` をいじる

I want to change color in boot screen.
:   You edit `clan/cbl/src/main/java/jp/ne/tir/clan/BootLoader.java`

ブート画面の色を変更したい
:   `clan/cbl/src/main/java/jp/ne/tir/clan/BootLoader.java` をいじる

I want to change boot screen more better.
:   You edit `clan/cbl/src/main/java/jp/ne/tir/clan/BootLoader.java`

その他ブート画面をもっとよくしたい
:   `clan/cbl/src/main/java/jp/ne/tir/clan/BootLoader.java` をいじる

I dont want boot screen.
:   You check to comment-outed area in `clan/layout/*.in`.

ブート画面を出したくない
:   `clan/layout/*.in` 内のコメントアウトされている部分を見てください。

二回目起動時に起動画面が表示されない
:   android実機では一度起動したプログラムはしばらくキャッシュされる為、二回目以降の起動は高速に行えます。起動画面は起動に時間がかかるのをごまかす為のものなので、高速起動できるなら起動画面を出す必要はないので、バージョン0.0.4からは出さないようにしました。

二回目起動時に、トップレベルのdefで定義した、以前に起動したプロセスの変数の内容が、android本体を再起動するまで残っている。
:   [clan/libgdx#androidのdexキャッシュ問題]()を見てください。

生成したjarにソースファイルを含めたくない
:   [clan/memo#配布物のjarにcalのソースファイルを含めないようにするには]()を見てください。

calのpomにライブラリを追加したら、PCでは動くのにdx.jarのコンパイル時に「`already added`」と言われて通らない
:   追加したライブラリのscopeを`provided`にしてください。

How to make windows exe for debug
:   do `make jar inner-release-exe`. but it is dangerous and be discouraged.

デバッグ版exeを作りたい
:   `make jar inner-release-exe` で作れます。しかし危険なのでおすすめしない。

What is something wrong to collision-detection of sample-app?
:   it can catch items by mouth only.

サンプルアプリの当たり判定おかしくない？
:   口の部分にのみ当たり判定があります。

I cannot press 'E' key on real-android-machine.
:   you can edit code that add button on screen, or use bluetooth keyboard.

android実機でEキーなんて押せねーよ！
:   自分でコードをいじって画面にボタンでも追加する。
    もしくはbluetoothキーボードを用意。

How do license?
:   see [clan/license]()(sorry, use translator).

ライセンスどうすればいい？
:   [clan/license]() を見てください。

nekoの使い方がわからない
:   androidではActivity内に子Activityを持つ構造が普通で、
    libgdxはその子Activity内にゲームを作る機能はあるけれど、
    Activity構造自体をどうこうする機能は提供していない。
    nekoはその機能があるので、そういう構造にしたい場合はnekoを使う。
    がayamadaがまだそういう機能を必要とするアプリを作ってないので
    取り込むだけ取り込んで放置されている。
    そういうアプリを作り始めたらドキュメントを書く。
    それまでは英語のnekoのドキュメントを読んで調べてほしい。

What is CLAN logo?
:   This is my family emblem. Change more better logo on later. (because
    it is too cutting corners.) logo's emblem part came from eps-file
    that distributed by [http://eps.crest-japan.net/index_en.php]().

CLANのロゴは何？
:   うちの家の家紋です。
    あとでもっとちゃんとしたロゴを作る(あまりにも手抜きなので)。
    家紋部分は [http://eps.crest-japan.net/]()
    からepsファイルを貰ってきて加工して作った。

What is assets of sample game?
:   all assets were made by me.

サンプルゲームの画像や音は何？
:   自作した。全部俺。

Etc...
:   see [clan/memo]().


-->


TODO
====

- simplify spaghetti build process (but it is difficult)

- enable proguard.cfg ( remove `-dontshrink` and tune-up )
    - [http://stackoverflow.com/questions/12281365/obfuscating-clojure-uberjars-with-proguard]()

- automatically change uses-permission (and others) in AndroidManifest.xml
    - I want to enable/disable `INTERNET`, `WRITE_EXTERNAL_STORAGE` when release/debug

- collecting and documentation to know-how in clojure(for android), libgdx, android, neko

- 増やし忘れ対策 of `PROJECT_ANDROID_VERSIONCODE` in configure.in

- maintain documents
- translate from japanese comment to english in source
- report to libgdx community
- change CLAN logo to more better


Help me
=======

- I(ayamada, developer of CLAN) have only short time for develop to CLAN.
    - Please give me [pull-req](https://github.com/ayamada/clan/pulls).
        - Especially, Java developer for BootLoader.java (but comments are written in japanese in source now, sorry...)
- I have no money.
    - Please give me a work for money.
        - See [my resume](/tir.ne.jp/members/yamada/resume#english-version).
    - Please donate me a money for develop to CLAN.
        - <form action="https://www.paypal.com/cgi-bin/webscr" method="post"><input type="hidden" name="cmd" value="_donations" /><input type="hidden" name="business" value="T47SCVZKCCHWL" /><input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!" /><input type="hidden" name="lc" value="en_US" /></form>
- Contact for me (provisional): [`@rnkv`](https://twitter.com/rnkv)

----

- 山田(CLAN開発者)はあまりCLAN自体の開発に時間を費せません。
    - よかったら [pull-req](https://github.com/ayamada/clan/pulls) おねがいします。
        - 特にJavaの得意な人。BootLoader.javaまわりは非常に改善の余地があります
- 山田は資金がありません。
    - よかったら金になるお仕事ください。
        - 詳細については[山田のresume](/tir.ne.jp/members/yamada/resume)を見てください。
    - よかったらCLAN開発資金を寄付してください。
        - …と言いたいところですが、日本ではPayPal経由での寄付ができないので、代わりに、下のページからamazonで買い物をしていただけると非常に助かります。
            - [http://vnctst.tir.jp/ja/misc/amazon.html]()
- libgdxは日本語ドキュメントが猛烈に不足しているので、あなたも自分のサイトでlibgdxの日本語記事を書いてみませんか？
    - 山田が書いた雑多な記事は、[clan/libgdx]()にあります。
- 山田はやる気がありません。
    - 「やる気」はこの世で最も貴重なものの内の一つであり、その源となるようなものがあったら是非ください(例えば、面白いurl等)
- 山田に連絡する場合はとりあえず [`@rnkv`](https://twitter.com/rnkv) あたりにください。


Link
====

- See [https://github.com/ayamada/clan#link]().


License
=======

CLAN have [Apache License 2.0](http://www.apache.org/licenses/LICENSE-2.0).

Which can be found in the file [LICENSE](https://github.com/ayamada/clan/blob/master/LICENSE).

(なお、CLANのライセンスは上記の通りですが、CLAN生成物のライセンスがどうなるかについては、 [clan/license]() にメモがあります。日本語のみ。)



<!-- vim:set ft=pandoc ts=4 sts=4 sw=4 et: -->
