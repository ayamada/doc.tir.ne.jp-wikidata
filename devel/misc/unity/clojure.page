---
toc: yes
categories: unity clojure
title: Unity内でClojureCLRを動かす
...

- [親ページ(Unityメモ)](../unity)


# 前紹介

- [スライド](http://vnctst.tir.jp/ccrou-test/) - [大阪でClojure交流会](http://atnd.org/events/52421)にて発表したもの
- [https://github.com/ayamada/ccrou-test]() - 上記スライドで公開したサンプルREPLのソース。Unityから開く。
- [https://github.com/nasser/clojure-unity]() - nasserさん達による先行プロジェクト。きちんとしたUnityプラグインとしての開発。
    - まだ開発途上につき、HEADでは動かない事も多いようだ。とりあえず `c0207892457ad35c00b6ccadae2965dc71ad0be4` をcheckoutすればIDE内実行は動くと思う(起動までかなり待たされるので注意)。
        - この中の `test` シーン がIDE実行できる。 `Assets/Clojure/clojure/moves.clj` をいじる事で、実行時の動作をその通りに変更できる。
- [https://github.com/nasser/clojure-clr/tree/unity]() - nasserさんによる、ClojureCLRのUnity向けブランチ。これが心臓部。ありがたい。


# うごかす手順

単に試したいだけの場合は、[サンプルREPLのリポジトリ](https://github.com/ayamada/ccrou-test)からUnityプロジェクトを取得するだけで動かせます(要Unity開発環境)。

以下は、きちんと自分でビルドして組み込みたい人向けの手順です。


## 制約

- Mac, Windows上でのみ動きます。今のところWeb client, Android, iOSではコンパイルが通りません。


## 前提

- 筆者はmacで作業を行っています。windowsだと色々と大変なところがあると思う


## 前準備

- Monoをインストールしておく
- Unityをインストールして、適切に設定を行っておく(詳細は[Unityメモ](../unity)参照)


## ClojureCLRのdllを生成

1. [https://github.com/nasser/clojure-clr/tree/unity]() をclone
    - ここはClojureCLR本家ではなく、[https://github.com/nasser/clojure-unity](clojure-unity) のメンテナの方によるブランチ。本家の方だとUnity上では動かない。
2. `git checkout unity` してブランチを切り替える
    - これを忘れると本家の方そのままになってしまうのでUnity上では動かない。
3. 同梱の `unity-build.sh` の内容を確認し、ビルド対象が `"Release 3.5"` になっている事を確認する。なっていない場合は修正する。
    - これが `"Debug 3.5"` でもIDE内実行はできるものの、作ったゲームをデプロイするとエラーが出て動かなくなる。これはClojureCLRが[動的モジュール定義](http://msdn.microsoft.com/ja-jp/library/76xbchca.aspx)を行う際に、デバッグ版だと「デバッグ用シンボルを含める」フラグを有効にしてしまうが、Unityのデプロイ後環境(リリース時環境)はそれを許容しないのが原因。素直にリリース版としてコンパイルしましょう。
4. `./unity-build.sh` を実行する。 `bin/3.5/Release/` 配下に色々と生成されるので、あとでこの中の `*.dll` を全部Unityプロジェクトにコピーする。


## Unityプロジェクト開始

1. 適当に既存のプロジェクトを開くか、新規プロジェクトを作成する。忘れずに、適切に設定を行っておく事(詳細は[Unityメモ](../unity)参照)
    - 既存プロジェクトの場合、[Player Settings](http://docs-jp.unity3d.com/Documentation/Manual/class-PlayerSettings40.html)の「API Compatibility Level」が「.NET 2.0」になっている事を確認。「.NET 2.0 Subset」の方だと動かない。
2. 上で作った `*.dll` を、プロジェクト内の `Assets/` 配下のどこかに適当に入れておく
3. スクリプト内から `clojure.lang.RT.var('clojure.core', 'read-string').invoke('[1 2 3]')` とかでvarを取り出して実行したり、 `clojure.lang.RT.load('clojure.string')` みたいに直にロードしたりする
    - このへんは[サンプルREPL](https://github.com/ayamada/ccrou-test)内の`ClojureTest.boo`あたりを見てください。


## デプロイ

- 普通にWin/Mac向けとしてビルドして、動く事を確認する。
    - IDE内では動くのに、ビルドして動かしたらエラーが出る場合は、ClojureCLRのバイナリがちゃんとリリース版になってるかを確認する。


## そして

- ゲームつくる!


# FAQっぽそうな項目

- `System.ArgumentNullException: Argument cannot be null` で動かない
    - きちんとUnity向けClojureCLRになってない。
    - unityでは `System.AppDomain.CurrentDomain.BaseDirectory` がnullを返すのが原因。Unity向けブランチなら対応コードが入れられている。

- IDEでは動くが、デプロイすると `The assembly for default symbol writer cannot be loaded` で動かない
    - ClojureCLRがデバッグビルドになっている。リリースビルドでないとデプロイしたら動かなくなる
    - デバッグ版ClojureCLRだと、`DefineDynamicModule`実行時にデバッグ情報シンボルを埋め込みフラグを有効にしようとするが、この機能がデプロイ後環境にはない為。ここのフラグ値はデバッグフラグと直結している。

- 含まれてる `Microsoft.*.dll` ってどこ由来？ライセンス大丈夫？
    - [http://dlr.codeplex.com/]() 由来。ライセンスは昔はMs-PLだったが今はApache2.0になったので大丈夫

- Unity内にて、どの機能が利用できて、どの機能が利用できないのかの判定について
    - [http://docs-jp.unity3d.com/Documentation/ScriptReference/MonoCompatibility.html]() にAPIの対応状況があるので、ここを見てみると参考になるかも(ならないかも)

- `*.dll` 内でエラーが出たけどよく分からない
    - [ILSpy](http://ilspy.net/)で逆コンパイルして調べる。すごい便利。

- 事前コンパイルした`hoge.clj.dll`の実行方法
    - `RT.load('hoge')`してからVar取得してinvoke()する
    - これが正式なやり方かはかなり怪しい。JVMみたいに`:gen-class`する方法があるのでは?

- どうにかしてWeb player上で動かしたい
    - .NET上の動的言語は大体、内部で[DLR](http://dlr.codeplex.com/)を使って動いており、ClojureCLRもDLRを使っている。が、このDLRが内部で呼んでいるモジュール(具体的には`System.Configuration`あたり)がUnityのWeb playerの対応外なので動かないようだ。
        - つまりWeb player上で動かしたければ、まずDLRを動くようにするのが第一歩、という事になる
    - 調査してみたが、IronPython等の、DLRを利用した他の動的言語もWeb player上で動かせるという情報が見当たらないので、非常に困難な道だと思われる。




<!-- vim:set ft=pandoc ts=4 sts=4 sw=4 et: -->
