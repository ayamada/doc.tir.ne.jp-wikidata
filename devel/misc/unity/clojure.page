---
toc: yes
categories: unity
title: Unity内でClojureCLRを動かす
...

# 関連リンク

- [親ページ(Unityメモ)](../unity)
- [スライド](http://vnctst.tir.jp/ccrou-test/) - [大阪でClojure交流会](http://atnd.org/events/52421)にて発表したもの
- [https://github.com/ayamada/ccrou-test]() - サンプルREPLのソース。Unityから開く。
- [https://github.com/nasser/clojure-unity]() - 先行プロジェクト。きちんとしたUnityプラグインとしての開発。
- [https://github.com/nasser/clojure-clr/tree/unity]() - 上記プロジェクトと同じ作者による、ClojureCLRのUnity向けブランチ。これが心臓部。


# うごかす手順

単に試したいだけの場合は、[サンプルREPLのリポジトリ](https://github.com/ayamada/ccrou-test)からUnityプロジェクトを取得するだけで動かせます(要Unity開発環境)。

以下は、きちんと自分でビルドして組み込みたい人向けの手順です。


## 制約

- Mac, Windows上でのみ動きます。今のところWeb clientでは動きません。
    - 試してないけど、Android, iOSでも動かないと思う


## 前提

- 筆者はmacで作業を行っています。windowsだと色々と大変なところがあると思う


## 前準備

- Monoをインストールしておく
- Unityをインストールして、適切に設定を行っておく(詳細は[Unityメモ](../unity)参照)


## ClojureCLRのdllを生成

1. [https://github.com/nasser/clojure-clr/tree/unity]() をclone
    - ここはClojureCLR本家ではなく、[https://github.com/nasser/clojure-unity](clojure-unity) のメンテナの方によるブランチ。本家の方だとUnity上では動かない。
2. `git checkout unity` してブランチを切り替える
    - これを忘れると本家の方そのままになってしまうのでUnity上では動かない。
3. 同梱の `unity-build.sh` の内容を確認し、ビルド対象が `"Release 3.5"` になっている事を確認する。なっていない場合は修正する。
    - これが `"Debug 3.5"` でもIDE内実行はできるものの、作ったゲームをデプロイするとエラーが出て動かなくなる。これはClojureCLRが[動的モジュール定義](http://msdn.microsoft.com/ja-jp/library/76xbchca.aspx)を行う際に、デバッグ版だと「デバッグ用シンボルを含める」フラグを有効にしてしまうが、Unityのデプロイ後環境(リリース時環境)はそれを許容しないのが原因。素直にリリース版としてコンパイルしましょう。
4. `./unity-build.sh` を実行する。 `bin/3.5/Release/` 配下に色々と生成されるので、あとでこの中の `*.dll` を全部Unityプロジェクトにコピーする。


## Unityプロジェクト開始

1. 適当に既存のプロジェクトを開くか、新規プロジェクトを作成する。忘れずに、適切に設定を行っておく事(詳細は[Unityメモ](../unity)参照)
    - 既存プロジェクトの場合、[Player Settings](http://docs-jp.unity3d.com/Documentation/Manual/class-PlayerSettings40.html)の「API Compatibility Level」が「.NET 2.0」になっている事を確認。「.NET 2.0 Subset」の方だと動かない。
2. 上で作った `*.dll` を、プロジェクト内の `Assets/` 配下のどこかに適当に入れておく
3. スクリプト内から `clojure.lang.RT.var('clojure.core', 'read-string').invoke('[1 2 3]')` とかでvarを取り出して実行したり、 `clojure.lang.RT.load('path/to/hoge.clj')` とかで直にロードしたりする
    - このへんは[サンプルREPL](https://github.com/ayamada/ccrou-test)内の`ClojureTest.boo`あたりを見てください。

つづきはあとで。


# 一時メモ

あとできちんとまとめる。

- [https://github.com/nasser/clojure-unity]() に、C#経由で実行しているプロジェクトファイル一式が公開されている。
    - まだ開発途上につき、HEADでは動かない事も多いようだ。とりあえず `c0207892457ad35c00b6ccadae2965dc71ad0be4` をcheckoutすればIDE内実行は動くと思う(起動までかなり待たされるので注意)。
        - この中の `test` シーン がIDE実行できる。 `Assets/Clojure/clojure/moves.clj` をいじる事で、実行時の動作をその通りに変更できる。


- 書くべき内容/書いておいた方がいいメモ
    - ClojureCLRのソース取得
    - ClojureCLRのコンパイル手順
        - 3.5リリース版を選択するという事
    - http://docs-jp.unity3d.com/Documentation/ScriptReference/MonoCompatibility.html へのリンク
    - ILSpyについて
    - PCのみの対応。ブラウザ、Android、iOSにはデプロイできない

- 事前コンパイルした`hoge.clj.dll`の正式な実行方法
    - `RT.load('hoge')`してからVar取得して実行はできるが、これが正式なやり方かは不明

- faq
    - `System.ArgumentNullException: Argument cannot be null` で動かない
        - きちんとUnity向けClojureCLRになってない。
        - unityでは `System.AppDomain.CurrentDomain.BaseDirectory` がnullを返すのが原因。Unity向けブランチなら対応コードが入れられている。
    - IDEでは動くが、デプロイすると `The assembly for default symbol writer cannot be loaded` で動かない
        - ClojureCLRがデバッグビルドになっている。リリースビルドでないとデプロイしたら動かなくなる
        - デバッグ版ClojureCLRだと、`DefineDynamicModule`実行時にデバッグ情報シンボルを埋め込みフラグを有効にしようとするが、この機能がデプロイ後環境にはない為。ここのフラグ値はデバッグフラグと直結している。
    - 含まれてる `Microsoft.*.dll` ってどこ由来？ライセンス大丈夫？
        - [http://dlr.codeplex.com/]() 由来。ライセンスはApache2.0と書いてあるので大丈夫

- clojure-unityリポジトリにフィードバックできるように、英語化する事を考慮する？


<!-- vim:set ft=pandoc ts=4 sts=4 sw=4 et: -->
