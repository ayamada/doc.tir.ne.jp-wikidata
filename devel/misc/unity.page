---
toc: yes
categories: unity
title: マウスを極力さわりたくないプログラマの為のUnity入門
...

これは、「テキストベースの非アクションゲーム」をUnityで構成する為のメモです。普通のUnity的ゲームやアクションゲームを作りたい人は他の文書を探してください。

- 「テキストベースの非アクションゲーム」とは、大体ステッパーズ・ストップあたりを想定しています。

筆者はmac版のunityで操作を行っている。windows版だとボタンの名前が違ったりする可能性あり。


# 「テキストベースの非アクションゲーム」のスケルトンプロジェクト構築手順

## 前準備

1. Unityインストール
    - 適当にインストールして起動するところまでやっとく。メールアドレス登録あたりがかなり分かりにくいが、ぐぐって調べればどうにかなる範囲
2. 早速起動する
3. 設定を行う
    - とりあえずメニュー項目より「Unity」→「Preferences」→「External Tools」→「External Script Editor」を、普段自分が使ってるvimなりemacsなりに設定変更する事。これであなたは生きのびる事ができる。


## プロジェクトの開始

1. 既に高度なサンプルプロジェクトが開かれている。画面上部の再生ボタンを押して遊んでみてもよい。
2. サンプルプロジェクトを閉じ、自分のプロジェクトを開始する。起動メニュー項目より「File」→「New Project」を選択し、項目を埋めればよい。
    - ディレクトリ名には、マルチバイト文字や空白文字を含まない方がいい気がする
    - 「Import」のチェックボックスは全て空でok
    - 「3D」「2D」の選択肢があるが、どちらでも問題ない(デフォルト値をどっちにするかという項目)
3. プロジェクトの保存形式をバイナリベースではなくテキストベースに変更し、git等で扱いやすくする。
    - 上メニューより「Edit」→「Project Settings」→「Editor」→「Asset Serialization」→「Mode」を「Force Text」にする。

引き続き、「タイトル画面」→「ゲーム開始」→「タイトル画面」というシーン遷移の最小構成を作る。OPデモ、エンディング、ゲームオーバー等の追加は後回し。


## タイトル画面の作成

1. いきなり空の3D空間が表示されていてビビるが、それは見なかった事にすればok(実際、この文書では全く使わない)。メニュー項目より「GameObject」→「Create Empty」を選ぶ。これで空のゲームオブジェクトが生成される。
2. この今生成したオブジェクトが、画面左のメイン領域のHierarchy欄に出現する。
3. オブジェクトをクリックし、選択状態にする。すると、右側のペイン領域に、このゲームオブジェクトの詳細が表示される。
    - 左側ペイン右側ペインどちらからでも、このオブジェクトの名前を変更する事ができる。「Title」のような名前をつけておくとよい。将来にゲームオブジェクトが増えた際に、それぞれを区別するのに役立つ。しかし今回は一個だけなので、名前をつけなくても問題ない。
4. 右側ペインにある「Add Component」ボタンを押し、「New Script」を選択する。
    1. 「Name」としてファイル名を入力する。とりあえずここでは「Title」とする。
        - スクリプト名はクラス名を兼ねる為、大文字はじまり推奨。
    2. 「Language」は、「JavaScript / C# / Boo(Python風)」のいずれかより、自分が一番好きな(もしくは「この三つの中では一番マシ」な)言語を選ぶ。
        - ここではJavaScriptを選択したものとして説明を行う。
        - 後述する「[JSとC#とBoo、どの言語を選ぶべきか](#jsとcとbooどの言語を選ぶべきか)」も後で読んどいてください。
    3. 「Create and Add」ボタンを押す。
        - これにより、画面下部ペイン領域の「Project」→「Assets」の中に、新しいファイルが作られる。
        - この「Assets」はアイコンの見た目通り、実際のディレクトリを示している。つまりプロジェクトディレクトリが仮に "/home/username/proj1" だったとすると、ここまでの操作によって "/home/username/proj1/Assets/Title.js" が作られた事になる。
5. (optional) 上記手順以外に、既存のスクリプトを直にAssetsに投入する事もできる。しかしその場合は上記のゲームオブジェクトにリンク(関連付け)されていないので、自分でリンクを行わなくてはならない。
    - スクリプトファイルのアイコンを、右側ペイン領域内にドラッグ＆ドロップすればok。既に追加されてるかどうかは、既に項目があるかどうかで判別できる。右クリックより「Remove Component」を選択する事で、リンク解除もできる。
6. ファイルをダブルクリックし、エディタで開き、編集する！とりあえず以下をコピペする。

    ~~~
    #pragma strict

    var logoRect:Rect;
    var logoStyle:GUIStyle;
    var buttonRect:Rect;

    function Start () {
      var w:int = 256;
      var h:int = 64;
      var x:int = (Screen.width - w) / 2;
      var y:int = Screen.height * 0.25;
      logoRect = Rect(x, y, w, h);

      logoStyle = GUIStyle.none;
      logoStyle.fontSize = 32;
      logoStyle.alignment = TextAnchor.MiddleCenter;

      w = 64;
      h = 32;
      x = (Screen.width - w) / 2;
      y = Screen.height * 0.75;
      buttonRect = Rect(x, y, w, h);
    }

    function Update () {
    }

    function OnGUI () {
      GUI.Label(logoRect, "ゲームタイトル", logoStyle);
      if (GUI.Button(buttonRect, "スタート")) {
        Application.LoadLevel("Game");
      }
    }
    ~~~

    - 簡単に解説すると、「`#pragma strict`」によって厳密な型指定有効なモードにし、`Start()`関数は最初の一回だけ呼ばれ、`Update()`関数は毎フレーム呼ばれ、`OnGUI()`関数も毎フレーム呼ばれる。今回利用するラベルやボタン類は`OnGUI()`の内部で描画するもの、という事になっているようだ。
    - また後で、[GUI スクリプティング ガイド](http://docs-jp.unity3d.com/Documentation/Components/GUIScriptingGuide.html)を見ながら、画像を設定したり、細かいデザイン等を調整したりするとよい。
    - エラー類は画面下部ペイン領域の「Console」および最下段のステータス行に表示される。「Project」タブと共によく使う部分となるようだ。

7. ソースファイルを変更した後は、Assetsを右クリックし、「Refresh」を実行する事。これをしないとunity側に変更内容が反映されない。
    - これはエディタによる？とりあえず標準エディタのMonoDevelopではこの作業は不要だった(MonoDevelopが内部で直に`*.meta`ファイルをいじる等している？)
8. 画面上部中央の再生ボタンを押し、タイトル文字とボタンが表示される事を確認する。
    - 今のところ、タイトル画面内の「スタート」ボタンを押してもエラーになる。遷移先のシーンをまだ作ってないからだ。
9. 「Title」シーンとして保存する。
    - メニューより「File」→「Save Scene as」にて「Title」として保存する(Assets内に保存される)。
10. メニューより「File」→「Build Settings」を選択し、「Add Current」ボタンを押してビルド対象として登録し、ダイアログを閉じる


## ゲーム本体の作成

1. メニューより「File」→「New Scene」を選択する。
2. タイトル画面同様、空のゲームオブジェクトを作成し、対応するスクリプトを生成する。オブジェクトおよびスクリプト名は「Game」とする。
    - 前述のタイトルのコード内の「`Application.LoadLevel("Game")`」のところに対応しているので、ここを変更した場合はタイトル側も変更する事。
3. タイトル画面同様、以下のサンプルソースを反映して動作確認し、「Game」シーンとして保存し、「Build Setting」にて登録を行う

~~~
#pragma strict

function Start () {
}

function Update () {
}

function OnGUI () {
  GUI.Label(Rect(32, 32, 256, 32), "TODO: ゲーム内容を実装");
  if (GUI.Button(Rect(32, 128, 128, 32), "タイトルに戻る")) {
    Application.LoadLevel("Title");
  }
}
~~~


## シーン遷移の設定およびビルド

1. メニューより「File」→「Build Settings」を選択
2. 「Scenes In Build」の項目の一番上(0番)がタイトルになっている事を確認する(これが最初に実行される)。
3. 「Platform」を自分が望むものに変更し、「Switch Platform」ボタンを押す。ここでは「Web Player」を選択した。
4. (optional) 「Player Settings」ボタンを押すとプレイヤー(操作キャラの事ではなく、再生環境つまりWeb Player等の事)側設定が行える。あとで本格的にデプロイする前ぐらいに、解像度やアイコンを設定しておくとよい。
5. 「Build And Run」ボタンを押すと保存ダイアログが出るので、適切な名前をつけて保存する。
    - 「Web Player」の場合は、指定した名前のディレクトリが作成され、中に`*.html`と`*.unity3d`が生成された。
6. 動作確認をして問題ない事を確認する。

- ここまでできたスケルトンのデプロイ結果を、 [http://vnctst.tir.jp/stash/unity0002/]() に設置した(大した事の全くないデモだが)。


## そしてゲーム作成へ

- [スクリプトリファレンス](http://docs-jp.unity3d.com/Documentation/ScriptReference/index.html)を見ながら、画像や効果音を追加したり、ゲーム本体を実装したり、ゲームオーバーやエンディングを実装したりする。
    - やろうと思えばユニティちゃん等の3Dオブジェクトを、背景として表示したり動かしたりもできるだろう。Unity的にはそっちこそが本業なのだし。
- とにかく[GUI スクリプティング ガイド](http://docs-jp.unity3d.com/Documentation/Components/GUIScriptingGuide.html)は全部目を通すべき。


# その他のメモ

## JSとC#とBoo、どの言語を選ぶべきか

- 上記での例ではJSを選んではいるものの、UnityのJavaScriptは標準的なECMAScriptではなく独自の方言になっており、これを選択する場合は、通常のJSよりも苦労する事を理解しておく事。
    - 「UnityのJSを選ぶとどのように苦労するのか」を知りたければ [http://wiki.unity3d.com/index.php/Head_First_into_Unity_with_UnityScript]() でも読んでください。
- この三つの中ではBooが一番言語仕様が真っ当に出来ているので、Python大嫌いとかでなければBooを選ぶとよい。
    - この文書のタイトルを見て読み進めるようなプログラマならBooを知らなくても、 [http://www.atsuhiro-me.net/unity/dev/boo-basic]() と [http://www.asahi-net.or.jp/~sy7a-ht/diary/tut_boo.html]() を読めば、問題ない程度にはBooを書けるだろう。
        - Boo言語自体の公式サイトは[http://boo.codehaus.org/]()にある。ここの左メニューからある程度のドキュメントを見れる。
    - 公式リファレンスにはJSとC#のコードサンプルはあるが、Booのコードサンプルは無い事がある。が、これも上記のようなプログラマならば問題なくJS/C#のコードサンプルから読み替えができるだろう。


## How to

- ゲームデータを保存するには
    - [PlayerPrefs](http://docs-jp.unity3d.com/Documentation/ScriptReference/PlayerPrefs.html)を使う。
    - [http://www.previewlabs.com/writing-playerprefs-fast/]()に、改善版がPublic Domainで置いてある(詳細は未確認)。

- 画像を表示するには
    1. テクスチャ画像ファイルを`Assets/Resouces/`に追加する。pngが無難
    2. [Resources.Load](http://docs-jp.unity3d.com/Documentation/ScriptReference/Resources.Load.html)で`Texture2D`型としてロードする
        - pathは`Assets/Resources/`からの相対path指定。また元ファイルについていた拡張子は消して指定する事(unityが勝手に内部でファイルをコンバートする為)
            - 要は`Assets/Resources/hoge.png`を置いたら、`Resources.Load("hoge")`でロードできる
    3. [Label](http://docs-jp.unity3d.com/Documentation/ScriptReference/GUI.Label.html)や[Button](http://docs-jp.unity3d.com/Documentation/ScriptReference/GUI.Button.html)の引数として渡す

- BGM/効果音を鳴らすには
    1. 音源ファイルを`Assets/Resouces/`に追加する。oggが無難
    2. [Resources.Load](http://docs-jp.unity3d.com/Documentation/ScriptReference/Resources.Load.html)で`AudioClip`型としてロードする
        - 上記テクスチャロード時の注意点も参照
    3. シーン内に[AudioSource](http://docs-jp.unity3d.com/Documentation/ScriptReference/AudioSource.html)を確保しておく。guiから作成したものを参照するか、[AddComponent](http://docs.unity3d.com/Documentation/ScriptReference/GameObject.AddComponent.html)で新たに追加生成する。
    4. BGMは上記AudioSourceの`clip`にロードした`AudioClip`設定してから[Play](http://docs-jp.unity3d.com/Documentation/ScriptReference/AudioSource.Play.html)を実行、SEなら直に[PlayOneShot](http://docs-jp.unity3d.com/Documentation/ScriptReference/AudioSource.PlayOneShot.html)の引数に渡して再生できる
        - 細かい再生パラメータは[AudioSource](http://docs-jp.unity3d.com/Documentation/ScriptReference/AudioSource.html)を参照
    5. 再生自体は上記で可能だが、このままではシーンを変更するとBGM/SEがすぐに終了してしまう。シーンが破棄される際に一緒にAudioSource類も破棄されてしまうからだ。これが嫌な場合は、現在のシーンとは別に、管理用の[GameObject](http://docs-jp.unity3d.com/Documentation/ScriptReference/GameObject.html)を生成し、[DontDestroyOnLoad](http://docs-jp.unity3d.com/Documentation/ScriptReference/Object.DontDestroyOnLoad.html)を設定した上で、[AddComponent](http://docs-jp.unity3d.com/Documentation/ScriptReference/GameObject.AddComponent.html)で[AudioSource](http://docs-jp.unity3d.com/Documentation/ScriptReference/AudioSource.html)を追加し、そっちで再生すればよい。これは各シーンから独立したオブジェクトになるので、ファイルも分けた方がよい。
        - つまり [http://zyyxlabo.blogspot.jp/2013/03/unitysoundmanager-ver.html]() みたいなのを作る事になる。「これでよい」と思う人であれば、これをそのまま使ってもよいと思う。
        - 自分の作ったコード。以下を `SE.boo` として保存し、別のスクリプトから `SE.Play("hoge")` を実行するだけで、勝手に"SE"という名前のGameObjectを作って保持しつつ"Assets/Resources/hoge.ogg"を一回だけ鳴らす。連打可能。鳴っている間にシーン変更があっても途切れない。

~~~
import UnityEngine

class SE:
  static private go as GameObject
  static private clips = {}
  static public MasterVol as single = 0.5

  static private def setup ():
    if not go:
      go = GameObject("SE")
      Object.DontDestroyOnLoad(go)
      go.AddComponent('AudioSource')

  static public def Load (path as string) as AudioClip:
    setup()
    clip as AudioClip = clips[path]
    if not clip:
      clip = Resources.Load(path, typeof(AudioClip))
      clips[path] = clip
    return clip

  static public def Play (path as string, vol as single):
    clip as AudioClip = Load(path)
    if not clip:
      Debug.LogWarning("'$path' not found", go)
    else:
      vol *= MasterVol
      go.audio.PlayOneShot(clip, vol)

  static public def Play (path as string):
    Play(path, 1.0)
~~~

- モーダルダイアログ的操作を行うには
    - [GUI.ModalWindow](http://docs-jp.unity3d.com/Documentation/ScriptReference/GUI.ModalWindow.html)を使う。ダイアログ内にボタン等の他のパーツを含めたい場合は、引数の`func:WindowFunction`内で描画するようにする。

- 重なったGUIオブジェクト同士での描画順序を制御するには
    - [GUI.BringWindowToBack](http://docs-jp.unity3d.com/Documentation/ScriptReference/GUI.BringWindowToBack.html)と[GUI.BringWindowToFront](http://docs-jp.unity3d.com/Documentation/ScriptReference/GUI.BringWindowToFront.html)を設定する。ただし上記モーダルダイアログは常に最前面。
        - [GUI.depth](http://docs-jp.unity3d.com/Documentation/ScriptReference/GUI-depth.html)は`OnGUI()`全体での設定になる。

- 背景色を変更するには
    - [Camera.main](http://docs-jp.unity3d.com/Documentation/ScriptReference/Camera-main.html).[backgroundColor](http://docs-jp.unity3d.com/Documentation/ScriptReference/Camera-backgroundColor.html)に好きな色を設定する
    - もしくはUnityのIDEより、シーン内に最初から入ってるカメラの設定をいじってもよい

## Unity上でLispを動かすには

何種類かの選択肢がある。

- Mono/.NET系のLisp処理系を動かす
    - C#もしくはBoo経由で `*.dll` になっているLisp処理系を実行し、Lispスクリプトをread/evalする。
    - Lisp処理系自体の初期化とスクリプトのロードに結構コストがかかる。
        - スクリプトをdllにコンパイルするタイプであれば初期化コストを抑えられるが、後述のBigloo以外には見付からなかった。
    - 試す事ができたのは以下。
        - [clojureCLR](https://github.com/clojure/clojure-clr)
            - [https://github.com/nasser/clojure-unity]() に、C#経由で実行しているプロジェクトファイル一式が公開されている。
            - 上記からgit cloneしてそのままunityでプロジェクトとして開けば動作確認できる。実行開始するまでの待ち時間が結構ある。
        - [IronScheme](http://ironscheme.codeplex.com/)
            - [http://forum.unity3d.com/threads/76266-Facilities-for-script-languages-Scheme-in-particular]() にREPL実行できるサンプルがある。
            - 上記ページの一番下にあるファイルをダウンロードし、unityのプロジェクトにimportし、importされた中の「SchemeTest」シーンを開き、「Maximize on Play」ボタンを押してから実行する(最大化しとかないとスクリーン最下段の入力欄が隠れて分からなくなる)。これでREPLが起動するので、あとは上記ページにあるように色々と試せる。
                - 色々試してたら、REPLが起動しなくなってしまう事があった。安定していないのか、それとも古いunity用だからなのか。
            - clojureCLRほどではないが、これも起動するまでに結構時間がかかる。
    - 試してはいないが、[TameScheme](http://tamescheme.sourceforge.net/) を利用した事例が [https://docs.google.com/document/d/13kocjneV_tprPBXm6q63QQnCqmofRMBCJ8qjzHmxvgk/pub]() にある。実行できる形式のファイルは公開されてないようだ。
        - TameScheme自体は、プロジェクトページを見る限り、未完成のようだが…
    - [http://jorgetavares.com/2013/01/20/common-lisp-on-net/]() に、Mono/.NET上で動くLisp処理系が紹介されている。

- [Bigloo](http://www-sop.inria.fr/indes/fp/Bigloo/) を使い、Schemeコードから `*.dll` を生成する
    - これは可能な筈だが、筆者はBiglooでdllを生成するところでつまづいたので確認できてない。検索してみたが、他にUnity+Biglooをやってみた人を見付ける事はできなかった。
    - 直に `*.dll` を生成できるので、実現できれば、他のdll系Lisp処理系と比べて初期化コストがかなり抑えられる筈だが…

- Lisp->JavaScriptコンパイラ/トランスレータを動かす
    - 上記の通り、UnityのJSは「UnityScript」という方言なので、既存のLisp->JavaScriptコンパイラ/トランスレータはそのままではまず動かないと思う。自分で改修するか、一から作るかする必要がある。
    - もし一から作る場合、コンパイル結果はJavaScriptにするのではなく、C#かBooのソースに変換する方が楽だと思う。
    - 前述の[Bigloo](http://www-sop.inria.fr/indes/fp/Bigloo/)には、SchemeコードからC#のソースを生成する機能があるっぽそうな感じだが、自分にはよく分からなかった


## 判明している問題点

- gitに保存しづらい
    - 丸ごとgitにつっこむ事自体は可能だが、追加アセットが無駄に容量食う
        - ユニティちゃんフルセットで追加すると150Mとか増える
        - .gitignore等で追加アセットを除外する事は可能だが、当然、他のところでgit cloneする際に問題が出る(clone後に手でアセット追加しないといけない)

- プロジェクトデータをテキストデータで保存するには
    - [#プロジェクトの開始]()を参照


## TODO

- [http://answers.unity3d.com/questions/47183/continuous-integration-with-unity.html]() によると、 `-batchmode` 引数によって、cliからビルド操作ができるらしい。これがあれば、上記スケルトンプロジェクトができた段階で、あとはunity本体は起動せずに、ソースのみ編集→ビルド、のサイクルができるようだ、多分。

## その他の参考リンク

- [https://github.com/unity3d-jp/SurfingGame]()
- [http://warapuri.tumblr.com/post/28972633000/unity-50-tips]()


<!-- vim:set ft=pandoc ts=4 sts=4 sw=4 et: -->
