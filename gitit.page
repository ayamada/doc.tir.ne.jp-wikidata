---
toc: yes
title: gititメモ
categories: gitit postponed
...

このdoc.tir.ne.jpは、[gitit]を使って構築しています。

このページでは、その[gitit]のノウハウやメモを書いていきます。

[gitit]: http://gitit.net/

このdoc.tir.ne.jpでのgititの構成や設定については、このページではなく、[/tir.ne.jp/structure/doc.tir.ne.jp]()にあります。


# 使った感想

- 「バックエンドがgit」なのは素晴らしい。裏でgit pushしてバックアップとか本番サイト反映とかできる。git cloneしてローカルで編集してpushとかもできる。

- あちこちに不具合や不便なところがあり、結構自分で手を入れる必要があるようだ(まだ枯れてないという印象)。
    - よってhaskellできない人は手を出さない方がいいと思う…

- ページ編集時の左側にmarkdown記法の非常に簡潔な記法一覧があり、それが非常に便利。

- 大した問題ではないが、「ページ/ファイルを移動させる」インターフェースがwebフロントエンドにない。「ファイル/内容をコピーする」「元ページ/ファイルを削除する」と二段階に分けて操作する事はできるがgitのコミットログが別々になってしまう。

- mediawiki等でよくある「あるページの特定項目だけ部分編集する」機能がない。
    - ブラウザに「textareaをエディタで開いて編集する」プラグインを入れないと、ハードな編集には向かないと思う。

- プラグイン機能はあるが、プラグインを追加する事でいじれるのは「本文回り」のみで、「gititにこういう処理(例えばファイル移動など)を追加したい」「本文以外のところを動的制御したい」という用途にはプラグインでは対応できない。
    - プラグインとして設定できるハンドラ種別が「PreCommitTransform(本文ソース保存直前)」「PreParseTransform(本文pandoc化直前)」「PageTransform(本文htmlページ化直前)」の三種しかなく、前述の本文に関わらない操作に対するハンドラ種別がない為。
    - 逆に「本文絡み」であれば、「コミットされた本文を裏で別サーバに送信」「コミットされたら特定コマンド実行」「ページにアクセスされたら本文内の指定された場所に、毎回別々の適切な文字列を生成」等々、大抵の事は柔軟に処理できる。

- バックエンドがgitなので、github連携すると色々と美味しい
    - [#github連携]()参照

- 調子にのってプラグインを追加しまくるとメモリ消費がとんでもない事になる
    - プラグインなしで30M消費、そこに極簡単なプラグインを6個追加すると150M消費

- コンセプトは素晴らしいし、基本部分はよくできているが、細かい部分で仕様の不完全さがあるように思える。
    - 例えば、プラグイン種別の切り分けが完璧ではないように思える。
        - プラグインの「PreCommitTransform」種別は「本文ソースの置換フィルタ」と「本文ソース保存時に同時に実行しておきたい操作実行」の両方を兼ねている為、プレビュー時にはこのハンドラは呼ばれない(し、呼んだらまずい事になる)ので、結果として「プレビュー時には置換されていなかった部分が保存したら置換されている」という事が起こる。この二つは分離すべきだと思う


# ノウハウ/メモ

## gititの読み方は「ぎちっと」
- …でいいのか？

## wikiname
- wikinameはそのままページのURLになってしまうので、これはURL encodeされない文字だけで構成するのがいいようだ。
- ページのメタ情報のところに「title: ページのタイトル」と入れておけば、このタイトルがwikinameの代わりに正式なタイトルとして使われるので、この機能を多用する。

## ページ移動などの複雑な変更
- 一旦gititサーバを停止させて、コマンドラインから「git mv ...」等のようにいじってコミットし、またgititサーバを起動させる。
    - gititサーバを停止させているのは、gitのワークツリーがwebフロントエンドから同時に変更されないようにする為。

## 書式
- gititで利用できるmarkdown書式は、通常のものよりも拡張された [Pandoc's markdown](http://johnmacfarlane.net/pandoc/README.html#pandocs-markdown) との事。
    - なので、エディタの書式設定も、通常のmarkdownではなく、pandoc用のものがベター。
        - vimだと [https://github.com/vim-pandoc/vim-pandoc]() だが、デフォルトだとかなり癖の強い設定になってるので人によっては調整が必要。

## undocumentedな機能
- /\_reloadTemplates にアクセスすると、サーバを再起動しなくてもページテンプレート(\*.st)が再読込される。よく変更するならsitenav.stあたりに含めておくと便利

## 見出しへのリンク
- 各ページ内の見出しは、以下のルールでanchor(#fragment)化される様子。リンクを貼る時に「とりあえずなんか変換が入る」とだけ憶えておけばok
    - アルファベットは全て小文字に
    - spaceは「-」に置換
    - マルチバイト文字はそのまま
    - その他の記号は削除(半角記号のみならず、マルチバイト文字の記号も大半が削除)


## readonly運用時の情報

- gititをreadonlyにするには、「require-authentication: modify」にした上で「authentication-method: mzero」にすればよい
    - 要は「ログインした人のみ編集可」にした上で「誰もログインできない認証モジュールを選択」の状態にしている

- あとはテンプレートをいじって、適当に編集機能へのリンクとかを消す、が、いじれない部分がある
    - ページ上のタブ部分、ここは個別に変更できないのでまとめて消すしかないようだ
    - export機能も、テンプレートからでは、個別に「この機能だけ提供」とかはできない様子。全部残すか全部消すかの二択

## gititで通常のウェブサイト的運用を行う
- 前述のreadonly化を行う。更新は別のところで行い、git push/pullで反映。
- ページ編集機能のみならず「全ページ一覧」「カテゴリ一覧」等のwiki的機能も不要ならば、reverse-proxy設定で「/\_ ではじまるpathはアクセス不可にする」設定にしてしまう手もある
    - しかし、検索機能である「\_search」やフィード購読である「\_feed」等、通常のウェブサイトであっても役に立つ機能もあるので、個別に禁止/許可した方がいいかも。

## gitリポジトリのカスケード式反映時の注意点
- gitで普通に「親リポジトリ→子リポジトリ→孫リポジトリ」という構造にすると、孫から子へのpush時に、以下のエラーが出てしまう。

        error: refusing to update checked out branch: refs/heads/master

    - このエラー後の文章の内容はだいたい以下のような内容。
        - > デフォルトでは、非bareなリポジトリかつ選択中のブランチへのpushは禁止されている。何故ならそこにpushするとindexとワークツリーに不整合が発生し、「git reset \-\-hard」を実行してワークツリーをHEADに合わせなくてはならなくなるからだ。
          > 'receive.denyCurrentBranch'を'ignore'か'warn'に設定すればpushできるようになるが、同時に上記コマンドを実行するルールを徹底できないならおすすめしない。
          > (以下省略)
    - これを回避するには、エラー内で表示されている通り、子リポジトリ側で以下のコマンドを実行すればよい。

            git config --add receive.denyCurrentBranch ignore

    - これで孫から子へpush可能になる。勿論、上記に書いてある通り、pushした後は子で「git reset \-\-hard」を実行するのを忘れないようにする事。

## github連携
- バックエンドがgitなので、github連携すると色々と美味しい
    - ただし有料のプライベートリポジトリ、もしくはページデータもpublicとする、もしくはgithubではなくbitbucketにする、等のどれかが必要
    - 履歴差分表示等はやっぱりgithubの方がずっと優れているので、差分リンク等はgithubの方で見る、とか
        - テンプレ上でgithubのurlと \$pageUrl$ を上手く組み合わせる事でリンクにできる。リンク先をblobにするかcommitsにするか等、色々と工夫の余地あり
        - 残念ながら、履歴一覧や差分表示そのものをgithubに投げるのは本体に手を入れないとできなさげ
        - gitit側リポジトリとgithub側リポジトリの同期状況に注意は必要
- なお、github連携をする際は、メールアドレスによってgithubアカウントが紐つけされるので、「gititアカウントでのメールアドレス設定」は「githubアカウントのメールアドレス」と同一にしておく事をおすすめします。
    - どうも、一旦登録してしまった後は、web経由だと、パスワード強制変更フォームからしかメールアドレス変更はできないようです。
        - これらのユーザ設定はローカルだと `gitit-users` ファイルに記録されているが、このファイルを手で編集した場合は、gititプロセスを再起動しないと変更が反映されないので注意。


# 不具合対策的な情報

## キャッシュ回り
- gitit.confで use-cache: yes にすると、リポジトリ直更新による内容更新がキャッシュに反映されない。
    - 「expireGititCache」コマンドが、gititコマンドと同じ場所にインストールされているので、それを叩くようにすればok
        - しかしこれ、各ページを個別に指定する必要があるのでちょっと面倒。もっと簡単にできないか考えたい
    - > The cache is persistent through restarts of gitit. To expire all cached pages, simply remove the cache directory.
        - …との事なので、直にcacheディレクトリを削除していいようだ。


## なんかずれた
- 例えば、リスト項目の中で「￥＜！－－　　－－￥＞」を書くと、それ以降の文章がリスト項目の子要素にされてしまった
    - ずれた時は、「！」等の他の記号も忘れずエスケープしてみましょう。「￥＜￥！－－　　－－￥＞」ならずれない。
- [pandocのドキュメント](http://johnmacfarlane.net/pandoc/README.html#backslash-escapes)によると、「`\`」でのエスケープが必要になる可能性のある記号は「``\ ` * _ { } [ ] ( ) > # + - . !``」との事(記述状況によってはエスケープ無しでも問題ない)。
    - 上記には書かれてないが「`&`」もエスケープが必要な場面があると思う
        - 「`&amp;`」のような、実体参照の文字列をそのまま書きたい時とか
    - これ以外の記号をエスケープしてしまっても別に問題になる事はないようなので、プレビュー等でなんかずれたり、エディタのpandoc用syntax色付け判定が怪しい時は、とにかくエスケープしてしまっていいようだ。
        - ただし一部の記法の内部([コードブロック](http://johnmacfarlane.net/pandoc/README.html#verbatim-code-blocks)や[Verbatim](http://johnmacfarlane.net/pandoc/README.html#verbatim)内)ではそもそもエスケープ不要。よく分からなくなった時はプレビューに頼る。


## 「`'`」を含むwikinameがwikilink化された時にページが見付からなくなる
- デフォルトで作られるトップページ内の「Gitit User's Guide」というwikilinkが既にその状態になってる。おそらく仕様。
    - 「`'`」が「\&#8217;」に実体参照され、全角になってしまっているのが原因。「\&#39;」なら正常に動くと思うが、どうすれば直るのか不明。utf8回りなのは間違いないが…
- 「`'`」を含むページは作らない方がいいという事だと理解する。
- このページは消してしまい、もし必要であれば公式サイトの方にリンクしてしまうのがいいと思う


## ページ削除が動いてないっぽい
- gitit.confのno-deleteに消したいページが設定されてないかを確認
    - エラーメッセージ等は別に出ないので非常に分かりにくい

# 不具合対策(パッチ有り)

## 余分にアンエスケープされてしまう
- どうも、ページ編集時に一回余分にhtml実体参照のアンエスケープ処理が入っているらしく、「＆ａｍｐ；ａｍｐ；ａｍｐ；ａｍｐ；ａｍｐ；」のように書いておいて別のところを編集していくと、徐々に短くなっていき最終的には「＆」だけになってしまう
    - 上記のテスト領域→ &amp;amp;amp;amp;amp;
    - この問題は他の「＆＊＊＊＊＊；」や「＆＃ｎｎ；」でも発生する
    - この問題はページ編集時以外にも、検索欄等でも同じように一回余分にアンエスケープ処理が入っている
    - 調べた結果、 Network/Gitit/Types.hs の「instance FromData Params where」のところで fromEntities をかけているが、これが原因のような気がする。あとでもう少し調べる
        - 調べた。以下のパッチで直ったが、そもそもどうしてここでunescapeしてるのか不明なので、他のところで不具合が出る可能性が高い。手元でしばらく運用してみて、問題がない事を確認してからpull-requestを送る
            - おそらく、非utf-8環境でのutf-8文字実体参照回りの対応の為っぽそうだが…

~~~~~~{.diff .numberLines}
diff --git a/Network/Gitit/Types.hs b/Network/Gitit/Types.hs
index a8d7bcf..6e8fe2b 100644
--- a/Network/Gitit/Types.hs
+++ b/Network/Gitit/Types.hs
@@ -300,7 +300,7 @@ instance FromReqURI [String] where

 instance FromData Params where
      fromData = do
-         let look' = liftM fromEntities . look
+         let look' = look
          un <- look' "username"       `mplus` return ""
          pw <- look' "password"       `mplus` return ""
          p2 <- look' "password2"      `mplus` return ""
~~~~~~

## カテゴリページで正しくリンクが表示されないページがある
- wikinameの末尾「.jp」とかのページでカテゴリ設定を行い、対応するカテゴリを見ると、一覧中のwikinameの末尾が切れてしまい、リンク切れを起こす
    - これも可能なら自分で調べて直して、pull-requestを送る
        - 送った→[https://github.com/jgm/gitit/pull/310]()
    - とりあえずdropExtensionしすぎなのが原因という事で、以下で直った。

~~~~~~{.diff .numberLines}
diff --git a/Network/Gitit/Handlers.hs b/Network/Gitit/Handlers.hs
index cc0251e..020dd78 100644
--- a/Network/Gitit/Handlers.hs
+++ b/Network/Gitit/Handlers.hs
@@ -704,7 +704,7 @@ categoryPage = do
              forM pages $ \f -> do
                categories <- liftIO $ readCategories $ repoPath </> f
                return $ if category `elem` categories
-                           then Just $ dropExtension f
+                           then Just f
                            else Nothing
   base' <- getWikiBase
   let toMatchListItem file = li <<
~~~~~~


## ページ新規作成の差分表示時に、\$revision\$が無い扱いになってしまう
- 差分表示時に、新規作成等でfromのrevisionが空の場合は、代わりにtoのrevisionを、 \$revision\$ として使うパッチ

~~~~~~{.diff .numberLines}
--- Network/Gitit/Handlers.hs.orig      2012-08-29 13:33:28.000000000 +0900
+++ Network/Gitit/Handlers.hs   2012-08-29 14:12:05.000000000 +0900
@@ -460,7 +460,7 @@
        Left e         -> liftIO $ throwIO e
        Right htmlDiff -> formattedPage defaultPageLayout{
                                           pgPageName = page,
-                                          pgRevision = from',
+                                          pgRevision = from' `mplus` to,
                                           pgMessages = pMessages params,
                                           pgTabs = DiffTab :
                                                    pgTabs defaultPageLayout,
~~~~~~


# 導入手順など

あとで！


# 外部リンク

- [http://utotch.blogspot.jp/2011/12/pandoc-blogger.html]()
    - pandocについての記事
- [http://www.slideshare.net/master_q/20110528-qpstudy]() 
    - gititプレゼン
- [http://hackage.haskell.org/packages/archive/gitit/latest/doc/html/Network-Gitit-Interface.html]()
    - 本家のプラグイン解説ドキュメント



<!-- vim:set ft=pandoc ts=4 sts=4 sw=4 et: -->
