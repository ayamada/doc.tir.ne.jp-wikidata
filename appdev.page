---
toc: yes
categories: 
title: アプリ開発環境構築
...

この領域には、androidおよびデスクトップ環境で実行可能なアプリを、clojureで書く為の環境を構築する手順を書く。

山田の環境がベースなので、それに準じた手順となる。
また、ここで扱う要素はどれもこれも進化/変化が非常に早い為、常に最新の状況を確認する必要がある。

# 要件
- 開発機は古めのwindowsマシン(しかし開発環境構築手順はwindows以外でも似た手順になる筈、しかもwindowsよりも楽に！)。
- 手軽にandroidアプリを作成する。
    - 山田はandroidアプリの開発/検証に[sony tablet S](http://www.sony.jp/tablet/products/S1/)を使用する。
- しかしjavaコードはなるべく書きたくない。java sucks.
    - 今回はclojureを採用する。lisp just sucks less.
- また、できれば同じコードでwindowsでも動かしたい。
    - これを実現する「androidゲーム用フレームワーク」として、以下の二つを検討した。
        - [PlayN](https://developers.google.com/playn/)
            - googleがメンテしている(元は[googleの20%ルール](https://www.google.com/search?nfpr=1&q=google%2020%25%E3%83%AB%E3%83%BC%E3%83%AB)から生まれたプロジェクトらしい)
            - android, PC(java), html5, flash, iOSに対してdeploy可能
            - OpenGLES 2.0相当以上の機能が必須
            - 3D方面はまだ開発途上らしいという話
        - [libgdx](http://libgdx.badlogicgames.com/)
            - 書籍[Androidゲームプログラミング A to Z](http://www.impressjapan.jp/books/3113)([amazon](http://www.amazon.co.jp/dp/4844331132))(これは非常に良い本だった)の著者が主メンテナ
            - android, PC(java), html5に対してdeploy可能。iOSは将来対応予定らしい
            - PlayNよりも(C的な意味で)自由度が高い(libgdxのポリシーについては前述の書籍参照)
            - OpenGLES 2.0相当以上の機能を使うかどうかは選択可能
    - 今回は古いPC(というか山田のPC。OpenGL2.0うごかない！)でも動かしたいのでlibgdxを選択した。しかしPlayNで開発する場合でも環境構築手順自体はほぼ変わらないのは確認済。


# 事前準備
windowsマシンをandroid開発向けにセットアップし、次いで今回利用するフレームワーク等も入れる。

尚、windowsマシンをまともに使えるようにする作業(最新になるまでwindows-update、作業ディレクトリのドライブ移動、ファイルの拡張子表示、システムファイル非表示解除、不要なサービスの停止、不要アプリのアンインストール、必要アプリのインストール、等々)は既に行ってあるものとする。


 0. mingw/msys導入
    - [http://d.hatena.ne.jp/bellbind/20110612/1307848645]() あたりを見ながら適当に導入し、PATHを通し、更に右クリックでどこからでもコンソール(山田はckw利用)を起動できるように設定しておく。またここにあるようにwgetのcertを更新しておく事。 .bash_login 等は以前に自分が使っていたものを持ってくる。
        - 山田はvimは香り屋版を使う為、香り屋版の方にPATHを通した上で mingw-get remove msys-vim を行った
        - $HOMEを設定しておく事！
 1. git導入
    - [http://msysgit.github.com/]() から「Git for Windows」の方をインストールした(msysGitの方はなんかうまく入らなかった)
    - gui操作とかはいらないので、とにかくPATHを通しておく
    - .gitconfigを他のマシンから持ってくる
    - ssh-keygenして公開鍵をgithubに登録
 2. jdk導入
    - まぎらわしくならないように、既にjreが入っている場合は、アンインストールして再起動して完全に削除しておく(結構前にそれではまった)。
    - oracleのサイトから適当にダウンロードしてインストールする
    - PATHに、jdkのbinを追加する
    - 環境変数JAVA_HOMEに、jdkのbinより前部分を追加しておく(maven用)
        - PATHと同じようにbinを追加すると、bin/binを探されてしまう
 3. maven導入
    - ダウンロードして適当な場所に設置
    - 例によって、PATHにbinを追加
    - 設置した中の conf/settings.xml を開き、ローカルリポジトリの場所を変更しておく。そうしないとシステムドライブにローカルリポジトリ作られて容量を食われる！
        - コメントアウトされてる中から `<localRepository>d:/maven_repos</localRepository>` みたいな箇所を探し出して書き換える
    - 日本語文字化け対策として、 `MAVEN_OPTS="-Duser.language=en"` を設定し、エラーを英語表示させる。
 4. android sdk導入
    - [http://developer.android.com/sdk/index.html]() から「USE AN EXISTING IDE」の方のをダウンロード、インストールする
    - 「USE AN EXISTING IDE」じゃない方はeclipse同梱版。eclipseは今回は使わないし、eclipse使う場合でもandroid sdkとは別に入れた方がトラブルになった時に入れ直ししやすいと思う
    - 一旦android sdk managerを起動し、必要なパッケージの更新および追加を行う
        - ここで必ずusb driverを入れる事
    - PATHを通す。 `...\Android\android-sdk\platform-tools` と `...\Android\android-sdk\tools` の二つを追加する必要がある
    - 同様に、環境変数ANDROID_HOMEに `...\Android\android-sdk` を追加
    - [http://www.sony.jp/support/tablet/products/info/sdk.html]() にある通りにファイルを書き換える。ファイルがロックされていて書き換えができない時は「adb kill-server」で一旦プロセスを止める事。
    - 実際にusb接続を行い、ドライバをインストールする。基本的にはこのページの通りに選択すればok [http://moon.ap.teacup.com/shelter9/178.html]() なお、このページでは「ハードウェアIDが公式サイトのものと違う」と書いてあるが、山田の端末では公式サイトと同じだった。何らかの差異がある様子。
 5. GWT導入(optional?)
    - メモがどっかいった…あとで調べ直す事
    - html5デプロイ用なのでなくてもいい筈
 6. eclipse導入(optional)
    - [http://www.eclipse.org/downloads/]() から "Eclipse IDE for Java Developers" をダウンロード、展開、適当な場所に設置
    - eclipse起動
    - 適当にディレクトリを用意し、そこをワークスペースディレクトリとして設定
    - まず「Help→Check for Update」で本体を最新にしておく
    - [http://developer.android.com/intl/ja/sdk/installing/installing-adt.html]() を見ながらインストールと設定を行う事。設定はwindow→preferences→Androidから「SDK Location」を実SDKのあるpathを指定する。デフォルトで検索されるようなので、正しくバージョン情報等が出ているなら「apply」と「ok」を押す
    - google web toolkitのプラグインを入れる。 [https://developers.google.com/web-toolkit/usingeclipse#installing]() 参照
        - ただしダウンロードURLは `http://dl.google.com/eclipse/plugin/4.2` を設定する事(4.2のところは該当するeclipseのバージョンによって違う様子。eclipseのバージョン数値わからん！)
    - vimで編集できるように外部エディタを設定する
        - eclipseのpreferenceの関連付けあたりで変更する
 7. bmfont.exe導入
    - libgdxが使うビットマップフォントを生成するのに使うので、 [http://www.angelcode.com/products/bmfont/]() を入れておく
        - フォント画像はpngで生成し、`*.png`が一個だけになるように画像サイズを調整する必要あり
        - `CJK Unified Ideographs Extension B` 系の文字を含めて生成しようとするとbmfont.exeがエラー終了する？フォントによる？とりあえず含めない方がよさげ
 8. libgdxを導入
    - 普通にサイトみながらセットアップするとeclipse向けになり、それはよろしくない。今回は [http://code.google.com/p/libgdx/wiki/MavenProjectSetup]() を見ながらmaven使用のセットアップを行う
        - [http://code.google.com/p/libgdx/wiki/MavenProjectSetup#Maven_Archetype]() にある通り、git clone, cd, mvn installするだけ
        - ちなみにPlayNもほぼ同様の手順(というかこのlibgdxのmaven対応自体がPlayN由来らしい)。PlayNの場合の詳細は [http://code.google.com/p/playn/wiki/GettingStarted]() 参照
 9. lein導入
    - `wget https://raw.github.com/technomancy/leiningen/preview/bin/lein` したものを、PATHの通ったbinに放り込む。実行権限もつける
        - このURLはプレビュー版。リリース版がいい場合は別のところから取る事(でもこれを行った時点では「プレビュー版推奨」ってあった気がする)
    - `lein --version` で自動的にダウンロード構築が実行され、その後にバージョン情報が表示される
    - なお、windowsの制約によって「実行中のファイルを消せない」ので、「lein upgrade」が実行できない。必要なら自分でバージョンアップしなくてはならない(TODO)
10. clojure導入
    - `*.zip`を取ってきて展開し、適当な場所に設置
    - 設置した場所で `mvn install` を実行する。
        - もしtestが通らない場合は、 `mvn install -Dmaven.test.skip=true` としてtestをスキップする
    - 尚、mavenからこのclojureを指定する際にgroupIdとかversion指定が必要になる為、「どのバージョンを入れたか」忘れないようにメモしておく事
11. exewrap導入(optional)
    - [http://code.google.com/p/exewrap/]() から取得し、適当に設置し、pathを通しておく、これはwindows向けに `*.jar` を `*.exe` にする為に使う
        - 今回、配布物として、google playでの`*.apk`配布、windows向けの`*.exe`配布、非windows PC向けの`*.jar`配布の三通りを想定


# 開発

ここはもうちょっといい感じになるように工夫する余地がある…。

## libgdxプロジェクト生成

- [http://code.google.com/p/libgdx/wiki/MavenProjectSetup#Maven_Archetype]()にある通り、 `mvn archetype:generate ...` を実行し、プロジェクトのテンプレートを生成する。
    - 上記の内、 `mvn archetype:generate -DarchetypeGroupId=com.badlogic.gdx -DarchetypeArtifactId=gdx-archetype -DarchetypeVersion=0.9.8-SNAPSHOT` のところまでは固定。それ以降の`groupId, artifactId, version, package, JavaGameClassName`はプロジェクト毎に適切に設定する。というか引数に渡さなければ対話入力モードになるのでそこで個別に入力すればよい。
- この状態で `mvn -Pdesktop package` とするとPC向けの実行可能`*.jar`が生成される。その後、 `java -jar desktop/target/...-with-dependencies.jar` とかで実行できる。
    - …んだが、2013/01/01現在、デフォルトで入ってるサンプルの画像が適当なせいで、何もいじらずに実行すると「テクスチャの大きさは2のpowerじゃないと駄目」ランタイムエラーが発生する。画像サイズを適当に256x256に変更するなり、コードの方をいじるなりするとよい。サンプルだから今は無視して先に進めてもok。
    - あと、上記wikiのページに書いてあるpathとは微妙に違っていた。まだ試行錯誤中のようなのでまた将来変更とかされてそう。
- 同様に、 `mvn -Pandroid install` で、署名なしapkが生成されて、usb接続されているandroid端末にインストールされる。インストールだけしかされないので実行するには更に手で端末を操作する必要がある。
    - 実際にgoogle playで配布する為の、署名付きapkを生成するには、Maven Android Pluginが必要らしい [http://code.google.com/p/maven-android-plugin/]() あとでしらべる
- ここまでで生成した `(JavaGameClassName).java` ファイルが一番にいじるべきファイルになる。この中に、まずスプラッシュスクリーンだかnow-loadingだかを出すコードをjavaで書き、その後で別途clojureで書いたクラスに制御を渡すようにする。
    - 何故スプラッシュスクリーンを出すのかというと、clojureの初期化に結構時間がかかる為！余裕があるならプログレッシブバー類も実装したいところ
    - このクラスは `implements ApplicationListener` なので、 `create() resize() render() pause() resume() dispose()` を実装する必要があり、この各methodの中から適切にclojure側クラスを呼ぶ必要がある。このクラス自体をclojureで書く事は可能だが、前述の通りスプラッシュスクリーン類を出したいので、ここぐらいは我慢してjavaで書く事。
- ここまで書いたら、まだclojure側ができていないので、ビルドできない状態になる。この状態で一旦放置する。
- 尚、ここまでの部分はclojure側のコードと完全に切り離されている為、別のアプリを作る際にも再利用できる。もうちょっとメンテしやすいようにする必要はあるが…。

## clojure側プロジェクト作成
- 先に作ったlibgdxプロジェクトから呼び出すコードに対応したパッケージ名(ns)、クラス名、インターフェースを持つclojureコードを書く。
- このコードはmavenで管理する。
    - まだ山田がmavenの扱いに慣れてないのでここはTODO…。どうにかして以下の処理を自動化したいところだが
    - とりあえず、 `src/...` に `*.clj` があるものとする。
    - また、空の `classes/` ディレクトリを作成しておく
- ここでは以下のようなコードを `src/jp/ne/tir/clojure/hello.clj` として書いた。

~~~~~~ { .clojure .numberLines }
(ns jp.ne.tir.clojure.hello
  (import
    com.badlogic.gdx.graphics.Texture
    com.badlogic.gdx.graphics.g2d.SpriteBatch
    )
  (:gen-class
    :methods [#^{:static true} [fuge [com.badlogic.gdx.graphics.g2d.SpriteBatch
                                      com.badlogic.gdx.graphics.Texture]
                                     void]]
    ))
(defn -fuge
  [batch texture]
  (. batch draw texture (float 100) (float 100)))

;; 呼び出し側のjavaコードは以下のようになる。
;; import jp.ne.tir.clojure.hello;
;; jp.ne.tir.clojure.hello.fuge(batch, texture);
;; // ↑の呼び出しで、clojure側で batch.draw(texture, 100f, 100f); が実行される
~~~~~~

- コンパイルしてjar化する。
    - `java -cp ./src:./classes:/path/to/clojure-1.5.0-RC1/clojure-1.5.0-RC1-slim.jar:/path/to/gdx-0.9.8-SNAPSHOT.jar clojure.main -e "(compile 'jp.ne.tir.clojure.hello)"`
        - clojureのjarは自分で設置したものでok。
        - libgdxのjarは、mavenのローカルリポジトリの中にあるものを指定したいが、正しい指定方法が分からなかった。とりあえず手で検索して指定したが…。
    - `jar cvf hello.jar -C classes .`
- できたjarをmavenのローカルリポジトリに登録する。
    - `mvn install:install-file -Dfile=hello.jar -DgroupId=jp.ne.tir.clojure.hello -DartifactId=hello -Dversion=0.0 -Dpackaging=jar`

## libgdx側プロジェクトからclojure側プロジェクトを取り込む
- libgdx側プロジェクトの `pom.xml` に以下を追加する。

~~~~~~ { .xml .numberLines }
	<dependencies>
		<dependency>
			<groupId>org.clojure</groupId>
			<artifactId>clojure</artifactId>
			<version>1.5.0-RC1</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>jp.ne.tir.clojure.hello</groupId>
			<artifactId>hello</artifactId>
			<version>0.0</version>
			<scope>compile</scope>
		</dependency>
	</dependencies>
~~~~~~

- これでビルドできるようになった。ビルドし、PCおよびandroid端末で動作確認する。


# まとめ

- うごいた！
- androidゲームをlisp(clojure)で作れる！
- しかもおなじものがwindowsでもうごく！
- clojure初期化処理じかんかかる！
- 誰かmavenの扱いに長けた人たすけて！
    - たすけてくれる方は[@rnkv](https://twitter.com/rnkv)あたりへ連絡を…


# TODO

- この部分を ClojureBootLoader クラス化し、任意のアプリを作成する際に利用できるようにし、プロジェクトはほぼcojureコードだけですむようにする
    - とは言え、libgdxの真のmain()はjavaで書いてあり、そこである程度のconfigを設定する必要はある
- mavenが生成したlibgdxのプロジェクトテンプレートに、`*.clj`を書いてデプロイまでできるようにする手順を確立する
    - 現状ではclojureコード部は完全に別パッケージで扱う手順になっているが、このclojureコードは前述のmain()やAndroidManifest.xml等と一緒に管理すべきだと思うので



<!-- vim:set ft=pandoc ts=4 sts=4 sw=4 et: -->
